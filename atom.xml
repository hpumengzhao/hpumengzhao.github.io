<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Meng Space</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-20T07:50:07.505Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Codancer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>考研日志</title>
    <link href="http://yoursite.com/2020/04/20/kaoyan/"/>
    <id>http://yoursite.com/2020/04/20/kaoyan/</id>
    <published>2020-04-20T07:38:49.355Z</published>
    <updated>2020-04-20T07:50:07.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="考研日志"><a href="#考研日志" class="headerlink" title="考研日志"></a>考研日志</h2><a id="more"></a><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>汤家凤1800进度：</p><div class="table-container"><table><thead><tr><th>内容</th><th>状态</th><th>日期</th></tr></thead><tbody><tr><td>一、函数、极限、连续</td><td>Finished</td><td>2020-4-13</td></tr><tr><td>二、导数与微分</td><td>Finished</td><td>2020-4-20</td></tr><tr><td>updating….</td><td>updating….</td><td>updating….</td></tr></tbody></table></div><p>汤家凤基础班视频进度：</p><div class="table-container"><table><thead><tr><th>章节</th><th>状态</th></tr></thead><tbody><tr><td>函数与极限</td><td>Watched</td></tr><tr><td>导数与微分</td><td>Watched</td></tr><tr><td>微分中值定理和导数的应用</td><td>Watched</td></tr><tr><td>不定积分</td><td>Watched</td></tr><tr><td>定积分</td><td>Watched</td></tr><tr><td>定积分的应用</td><td>Watching…</td></tr></tbody></table></div><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>百词斩打卡天数：<strong>142</strong></p><p>真题套数: <strong>0</strong></p><h3 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h3><p>空</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;考研日志&quot;&gt;&lt;a href=&quot;#考研日志&quot; class=&quot;headerlink&quot; title=&quot;考研日志&quot;&gt;&lt;/a&gt;考研日志&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms Weekly 5</title>
    <link href="http://yoursite.com/2020/04/19/Algorithmwk5/"/>
    <id>http://yoursite.com/2020/04/19/Algorithmwk5/</id>
    <published>2020-04-19T11:56:54.026Z</published>
    <updated>2020-04-19T12:28:57.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="An-Easy-problems-week"><a href="#An-Easy-problems-week" class="headerlink" title="An Easy problems week"></a>An Easy problems week</h2><a id="more"></a><p>本周参加了三场比赛，Codeforces Round #634 (Div. 3)，牛客小白月赛，和本周的力扣周赛。</p><ul><li><p><strong>Codeforces Round #634 (Div. 3)</strong></p><p>standing:</p><p><img src="https://i.loli.net/2020/04/19/Nm2AryxLXzUkOEQ.png" alt="image-20200419200205067.png"></p></li></ul><p>div3场还是稍微简单一些，但是中间被D卡了，然后先跑去写了E1&amp;E2，不过cf的机子是真的快，我E2代码的复杂度大概是$2e9$，但是$1.4s$就跑完了。回头看过D突然发现这是个简单题，题目大意就是一个$9<em>9$的数独，每个位置的数字都在$[1,9]$之内，你最多可以改变$9$个位置的数字，即变成另一个$[1,9]$内的数字，**使得每行，每列，每个3</em>3的子数独都存在相同元素**，给出一种改变方法。</p><p>思路就是改变$(0,0),(1,3),(2,6),(3,1),(4,4),(5,7),(6,2),(7,5),(8,8)$这九个位置即可。</p><ul><li><p><strong>牛客小白月赛24</strong></p><p>standing:</p><p><img src="https://i.loli.net/2020/04/19/fUcpo3qZr9ykxOC.png" alt="image-20200419201023216.png"></p></li></ul><p>貌似并没有很精妙的题目，都是板子&amp;套路题。</p><ul><li><p>Leetcode Weekly 185</p><p>standing（貌似前200有字节内推机会，对于考研狗毫无意义）</p><p><img src="https://i.loli.net/2020/04/19/5yoSx81GeU6q2fT.png" alt="image-20200419201320512.png"></p></li></ul><p>这次的T3还是很有意思的。</p><p><strong>T3题面</strong>：</p><p>给你一个字符串 <code>croakOfFrogs</code>，它表示不同青蛙发出的蛙鸣声（字符串 “croak” ）的组合。由于同一时间可以有多只青蛙呱呱作响，所以 <code>croakOfFrogs</code> 中会混合多个 “croak” <em>。</em>请你返回模拟字符串中所有蛙鸣所需不同青蛙的最少数目。</p><p><strong>注意：</strong>要想发出蛙鸣 “croak”，青蛙必须 <strong>依序</strong> 输出 <code>‘c’, ’r’, ’o’, ’a’, ’k’</code> 这 5 个字母。如果没有输出全部五个字母，那么它就不会发出声音。</p><p>如果字符串 <code>croakOfFrogs</code> 不是由若干有效的 “croak” 字符混合而成，请返回 <code>-1</code> 。</p><p>我的解法是类似于括号匹配的方式，设置四个变量代表当前$c,r,o,a$的数目，假设当前字母是$r$，那么$c$的个数就要减去$1$，当遇到$k$的时候就算是匹配完了一只青蛙了，此时更新最大值，最大值为$max(ans,nc+nr+no+na+1)$</p><p>实际就是每次更新还未匹配完的线程数（可能这样容易理解点）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberOfFrogs</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bc=<span class="number">0</span>,br=<span class="number">0</span>,bo=<span class="number">0</span>,ba=<span class="number">0</span>,bk=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'c'</span>) ++bc;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'r'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bc==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                --bc;</span><br><span class="line">                ++br;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'o'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(br==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                --br;</span><br><span class="line">                ++bo;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'a'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bo==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                --bo;</span><br><span class="line">                ++ba;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'k'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ba==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                --ba;</span><br><span class="line">                maxx=max(maxx,ba+bo+br+bc+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bc||br||bo||ba) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> maxx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>T4是一个很简单的dp，此处不再赘述，贴个代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">60</span>][<span class="number">101</span>][<span class="number">60</span>];<span class="comment">//截止到a[i] 最大值为j cost为k的方案数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numOfArrays</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) dp[<span class="number">1</span>][i][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> now=<span class="number">1</span>;now&lt;=m;now++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> last=<span class="number">1</span>;last&lt;=m;last++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(now&gt;last)&#123;</span><br><span class="line">                            dp[i][now][k+<span class="number">1</span>]+=dp[i<span class="number">-1</span>][last][k];</span><br><span class="line">                            dp[i][now][k+<span class="number">1</span>]%=mod;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            dp[i][last][k]+=dp[i<span class="number">-1</span>][last][k];</span><br><span class="line">                            dp[i][last][k]%=mod;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            ans+=dp[n][i][k];</span><br><span class="line">            ans%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;An-Easy-problems-week&quot;&gt;&lt;a href=&quot;#An-Easy-problems-week&quot; class=&quot;headerlink&quot; title=&quot;An Easy problems week&quot;&gt;&lt;/a&gt;An Easy problems week&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="Problems" scheme="http://yoursite.com/tags/Problems/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms Weekly 4</title>
    <link href="http://yoursite.com/2020/04/11/AlgorithmWK4/"/>
    <id>http://yoursite.com/2020/04/11/AlgorithmWK4/</id>
    <published>2020-04-11T10:50:25.826Z</published>
    <updated>2020-04-13T04:02:04.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-TLE-Week"><a href="#A-TLE-Week" class="headerlink" title="A TLE Week"></a>A TLE Week</h2><a id="more"></a><ul><li><p><strong>Nowcoder练习赛61</strong></p><p>D.<strong>最短路变短了</strong></p><p>一个$n$个节点$m$条边的有向图，有$q$次查询，每次查询一条边$(u,v)$，如果把$(u,v)$反过来，判断$1$到$n$</p><p>的最短路会不会变短。</p><p>$(1≤n≤100000),(1≤m≤200000), (1≤q≤200000)$</p><p>solution:</p><p>先跑一边最短路，令$da_{i}$代表$1$到$i$的最短路，再反向建边以$n$为起点跑一边最短路，$db_{i}$为$i$到$n$的最短路，</p><p>对于查询的$(u,v,w)$，判断是否$da_{v}+w+db_{u}&lt;da_{n}$，如果满足，则最短路会变短。</p><p>code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">* @author:  codancer</span></span><br><span class="line"><span class="comment">* @createTime:  2020-04-10, 20:13:32</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fep(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">ll dis;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,u,v,x;</span><br><span class="line">ll w;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node a,node b)&#123;</span><br><span class="line"><span class="keyword">return</span> a.dis&gt;b.dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">graphs</span>&#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,ll&gt;&gt; G[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span>&#123;</span><br><span class="line">G[u].pb(&#123;v,w&#125;);</span><br><span class="line">&#125;</span><br><span class="line">ll dis[N];</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> st)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dis[i]=<span class="number">1e17</span>;</span><br><span class="line">&#125;</span><br><span class="line">dis[st]=<span class="number">0</span>;</span><br><span class="line">q.push(&#123;st,<span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">node rt=q.top();q.pop();</span><br><span class="line"><span class="keyword">int</span> u=rt.id;</span><br><span class="line"><span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> adj:G[u])&#123;</span><br><span class="line"><span class="keyword">int</span> v=adj.first;</span><br><span class="line">ll w=adj.second;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+w)&#123;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line">q.push(&#123;v,dis[v]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;A,B;</span><br><span class="line">pair&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,ll&gt; edges[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %lld"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">edges[i]=&#123;&#123;u,v&#125;,w&#125;;</span><br><span class="line">A.addedge(u,v,w);</span><br><span class="line">B.addedge(v,u,w);</span><br><span class="line">&#125;</span><br><span class="line">A.bfs(<span class="number">1</span>);</span><br><span class="line">B.bfs(n);</span><br><span class="line">ll ans=A.dis[n];</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="keyword">int</span> uu=edges[x].first.first;</span><br><span class="line"><span class="keyword">int</span> vv=edges[x].first.second;</span><br><span class="line">ll ww=edges[x].second;</span><br><span class="line">ll fi=A.dis[vv];</span><br><span class="line">ll se=B.dis[uu];</span><br><span class="line"><span class="keyword">if</span>(fi+se+ww&lt;ans)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Leetcode 30days challenge</p><p><strong>Middle of the Linked List</strong></p><p>寻找链表的中间节点，这是一个非常经典的问题，设置两个指针，一个每次跳一步，另一个每次跳两步，直到快的那个为空，慢的那个所在的节点即为答案。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">   * struct ListNode &#123;</span></span><br><span class="line"><span class="comment">   *     int val;</span></span><br><span class="line"><span class="comment">   *     ListNode *next;</span></span><br><span class="line"><span class="comment">   *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment">   * &#125;;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">          ListNode *A=head;</span><br><span class="line">          ListNode *B=head;</span><br><span class="line">          <span class="keyword">while</span>(B!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">              B=B-&gt;next;</span><br><span class="line">              <span class="keyword">if</span>(B==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                  <span class="keyword">return</span> A;</span><br><span class="line">              &#125;</span><br><span class="line">              A=A-&gt;next;</span><br><span class="line">              B=B-&gt;next;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> A;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>给 N x 3 网格图涂色的方案数</strong></p><p>题面：</p><ul><li>你有一个 $n \cdot  3$ 的网格图 grid ，你需要用 红，黄，绿 三种颜色之一给每一个格子上色，且确保相邻格子颜色不同（也就是有相同水平边或者垂直边的格子颜色不同）。给你网格图的行数 $n$ 。请你返回给 grid 涂色的方案数。由于答案可能会非常大，请你返回答案对 $10^9 + 7$ 取余的结果。</li></ul><p>解法:</p><ul><li>简单dp,枚举每一行的所有状态，按行转移即可，时间复杂度$O(27n)$。</li></ul><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">5005</span>][<span class="number">30</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numOfWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="comment">// string up,now;</span></span><br><span class="line">        <span class="keyword">int</span> up[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;,now[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">25</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=i;</span><br><span class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x)&#123;</span><br><span class="line">                up[cnt++]=x%<span class="number">3</span>;</span><br><span class="line">                x/=<span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(up[<span class="number">2</span>]!=up[<span class="number">1</span>]&amp;&amp;up[<span class="number">1</span>]!=up[<span class="number">0</span>])&#123;</span><br><span class="line">                dp[<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> last=<span class="number">0</span>;last&lt;=<span class="number">25</span>;last++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++) up[j]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">bool</span> ok=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> x=last;</span><br><span class="line">                <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(x)&#123;</span><br><span class="line">                    up[cnt++]=x%<span class="number">3</span>;</span><br><span class="line">                    x/=<span class="number">3</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(up[<span class="number">2</span>]!=up[<span class="number">1</span>]&amp;&amp;up[<span class="number">1</span>]!=up[<span class="number">0</span>])&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> nxt=<span class="number">0</span>;nxt&lt;=<span class="number">25</span>;nxt++)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++) now[k]=<span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">int</span> x=nxt;</span><br><span class="line">                        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">while</span>(x)&#123;</span><br><span class="line">                            now[cnt++]=x%<span class="number">3</span>;</span><br><span class="line">                            x/=<span class="number">3</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(now[<span class="number">2</span>]!=now[<span class="number">1</span>]&amp;&amp;now[<span class="number">1</span>]!=now[<span class="number">0</span>])&#123;</span><br><span class="line">                            <span class="keyword">if</span>((now[<span class="number">0</span>]!=up[<span class="number">0</span>])&amp;&amp;(now[<span class="number">1</span>]!=up[<span class="number">1</span>])&amp;&amp;(now[<span class="number">2</span>]!=up[<span class="number">2</span>]))&#123;</span><br><span class="line">                                dp[i][nxt]+=dp[i<span class="number">-1</span>][last];</span><br><span class="line">                                dp[i][nxt]%=<span class="number">1000000007</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">25</span>;i++)&#123;</span><br><span class="line">            ans+=dp[n][i];</span><br><span class="line">            ans%=<span class="number">1000000007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>ABC162E.  Sum of gcd of Tuples (Hard)</strong></p><p>题意:</p><ul><li>有一个未知序列$a$,长度为$n$,已知$a$中的每个元素都在$[1,k]$之内，这样的序列有$k^n$个，计算<script type="math/tex; mode=display">\sum\limits_{i=1}^{k^n}{gcd(a_{1},a_{2}...,a_{n})}</script></li></ul><p>解法：</p><ul><li>考虑$cnt_{i}$为$gcd$为$i$的所有序列个数，那么$a$中的每个元素必定是$i$的倍数，这样的序列有${\lfloor \frac{k}{i} \rfloor}^n$个，但是这样我们也会把$gcd$为$2i,3i,4*i…$也会统计上，因此还得减去$cnt_{j}(j|i)$，我们从$k$到$1$倒着枚举即可，时间复杂度为$O(n \cdot \sqrt n)$。</li></ul><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @author:  codancer</span></span><br><span class="line"><span class="comment">* @createTime:  2020-04-12, 21:02:02</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fep(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans=ans*a%mod;</span><br><span class="line">a=a*a%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line">ll cnt[<span class="number">500005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll n,k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line">fep(i,k,<span class="number">1</span>)&#123;</span><br><span class="line">cnt[i]=qpow(k/i,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>*i;j&lt;=k;j+=i)&#123;</span><br><span class="line">cnt[i]-=cnt[j];</span><br><span class="line">cnt[i]+=mod;</span><br><span class="line">cnt[i]%=mod;</span><br><span class="line">&#125;</span><br><span class="line">ans+=((ll)i*cnt[i])%mod;</span><br><span class="line">ans%=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>ABC162F.  Select Half</strong></p><p>题意：</p><ul><li>从长度为$n$的数组$a$中选出$\lfloor \frac{n}{2} \rfloor$个不相邻的元素使他们和最大。</li></ul><p>解法：</p><ul><li><p>假设选择了前$i$个元素并且$a_{i}$被选择了,此时最少会有$\lfloor \frac{n+1}{2} \rfloor-1$个空格，类似于：</p><p>XOXOXOXO</p><p>XOXOXO（X是被选择的）</p><p>令$dp_{i,j}$代表选择了$a_{i}$并且比$\lfloor \frac{i+1}{2} \rfloor-1$多使用了$j$个空格，$j$最大为$2$，此时的最大值。</p><p>因此我们可以得出转移方程：</p><p>$dp_{i,0}=dp_{i-2,0}+a_{i}$ (一个也不多，那么肯定是选择了第$i-2$个，接下来就是$i$)</p><p>$dp_{i,1}=max(dp_{i-2,1},dp_{i-3,0})+a_{i}$(多一个空格，可能是从$i-2$之前就多了，或者多出来的就是$i-2$)</p><p>$dp_{i,2}=max(dp_{i-2,2},dp_{i-3,1},dp_{i-4,0})+a_{i}$（读者可以自己分析，不再赘述，和$dp_{i,1}$的情况类似）</p><p>转移完之后考虑$n$的奇偶性，如果$n$为奇数。</p><p>假设最后选了第$n$个，结果为$dp_{n,2}$(肯定多$2$个)</p><p>XOXOOOX(本来是最少用$3-1=2$个空格，现在用了$4$个)</p><p>假设最后选择了第$(n-1)$个，那么结果为$dp_{n-1,1}$(肯定多$  1 $个)</p><p>XOXOOXO(本来是最少用$3-1=2$个空格，现在用了$ 3 $个)</p><p>假设最后选择了第$(n-2)$个，那么结果为$dp_{n-2,0}$</p><p>XOXOXOO(只用了两个)</p><p>偶数情况类似，答案取$max(dp_{n-1,0},dp_{n,1})$，读者可以自己讨论。</p></li></ul></li></ul><pre><code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @author:  codancer</span></span><br><span class="line"><span class="comment">* @createTime:  2020-04-13, 10:42:14</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fep(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">100</span>;</span><br><span class="line">ll dp[N][<span class="number">3</span>];</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">rep(j,<span class="number">0</span>,<span class="number">2</span>)&#123;</span><br><span class="line">dp[i][j]=<span class="number">-1e18</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,<span class="number">3</span>) dp[i][i<span class="number">-1</span>]=a[i];</span><br><span class="line">rep(i,<span class="number">3</span>,n)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">2</span>)&#123;</span><br><span class="line">dp[i][<span class="number">0</span>]=max(dp[i][<span class="number">0</span>],dp[i<span class="number">-2</span>][<span class="number">0</span>])+a[i];</span><br><span class="line">dp[i][<span class="number">1</span>]=max(dp[i][<span class="number">1</span>],dp[i<span class="number">-2</span>][<span class="number">1</span>]+a[i]);</span><br><span class="line">dp[i][<span class="number">2</span>]=max(dp[i][<span class="number">2</span>],dp[i<span class="number">-2</span>][<span class="number">2</span>]+a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">3</span>)&#123;</span><br><span class="line">dp[i][<span class="number">1</span>]=max(dp[i][<span class="number">1</span>],dp[i<span class="number">-3</span>][<span class="number">0</span>]+a[i]);</span><br><span class="line">dp[i][<span class="number">2</span>]=max(dp[i][<span class="number">2</span>],dp[i<span class="number">-3</span>][<span class="number">1</span>]+a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">4</span>)&#123;</span><br><span class="line">dp[i][<span class="number">2</span>]=max(dp[i][<span class="number">2</span>],dp[i<span class="number">-4</span>][<span class="number">0</span>]+a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">-1e18</span>;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">ans=max(ans,dp[n][<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">ans=max(ans,dp[n<span class="number">-1</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">2</span>)&#123;</span><br><span class="line">ans=max(ans,dp[n<span class="number">-2</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ans=max(ans,dp[n][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">1</span>) ans=max(ans,dp[n<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;A-TLE-Week&quot;&gt;&lt;a href=&quot;#A-TLE-Week&quot; class=&quot;headerlink&quot; title=&quot;A TLE Week&quot;&gt;&lt;/a&gt;A TLE Week&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="Probelems" scheme="http://yoursite.com/tags/Probelems/"/>
    
  </entry>
  
  <entry>
    <title>2019 总结</title>
    <link href="http://yoursite.com/2020/04/08/2019Finals/"/>
    <id>http://yoursite.com/2020/04/08/2019Finals/</id>
    <published>2020-04-08T02:41:56.031Z</published>
    <updated>2020-04-08T03:10:09.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2019总结"><a href="#2019总结" class="headerlink" title="2019总结"></a>2019总结</h2><a id="more"></a><h2 id="一些奖项："><a href="#一些奖项：" class="headerlink" title="一些奖项："></a>一些奖项：</h2><ul><li>CCPC省赛: Gold Medal</li><li>ICPC省赛：Silver Medal</li><li>CCPC秦皇岛：Honorable Mention</li><li>ICPC亚洲区域赛宁夏：Gold Medal</li><li>ICPC EC-Final：Bronze Medal</li><li>ICPC-ID:<br><img src="https://i.loli.net/2020/01/24/OFfbHRV4Tiv8kdB.png" alt="id.png"></li></ul><h2 id="一些经历"><a href="#一些经历" class="headerlink" title="一些经历"></a>一些经历</h2><ul><li><p>担任了一年的算法协会会长</p></li><li><p>组织策划了2019暑期集训</p></li><li><p>组织策划了积分赛</p></li><li><p>组织策划了第10届ACM校赛并放到了牛客网上重现：<a href="https://ac.nowcoder.com/acm/contest/3665" target="_blank" rel="noopener">网址</a></p></li><li><p>ICPC区域赛和郑大同时获得了河南首金</p></li><li><p>去看了大海</p></li><li><p>去银川吃了羊肉</p></li><li><p>再游了西安</p></li><li><p>刷新了坐火车最长时间的记录</p></li><li><p>登上了迎新晚会的舞台</p></li><li><p>自己挣到了一笔钱</p></li><li><p>大三上学期在最后两周独立完成了Web和数据库课程设计</p></li><li><p><strong>认识了一群志同道合的好朋友</strong></p></li></ul><h2 id="一些遗憾"><a href="#一些遗憾" class="headerlink" title="一些遗憾"></a>一些遗憾</h2><ul><li>没有拿到奖学金</li><li>绩点再创新低（3.03）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2019总结&quot;&gt;&lt;a href=&quot;#2019总结&quot; class=&quot;headerlink&quot; title=&quot;2019总结&quot;&gt;&lt;/a&gt;2019总结&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms Weekly 3</title>
    <link href="http://yoursite.com/2020/04/08/Algorithmwk3/"/>
    <id>http://yoursite.com/2020/04/08/Algorithmwk3/</id>
    <published>2020-04-08T02:36:42.438Z</published>
    <updated>2020-04-13T03:44:26.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="An-April-Fool’s-week"><a href="#An-April-Fool’s-week" class="headerlink" title="An April Fool’s week"></a>An April Fool’s week</h2><a id="more"></a><ul><li><strong>Jordan Smiley(April Fools Day Contest 2020 E)</strong><br>给你一张图片，判断$(x,y)$是否在脸里面。。<br><img src="https://espresso.codeforces.com/f5d68ed69f4ec8fcc71db0c55cf6acb9860b5e4a.png" width="30%"></li><li>step1:<br>利用画图工具将闭合区域填充:<br><img src="https://i.loli.net/2020/04/02/pVWs5vOYxPdEeal.png" width="30%"></li><li>step2:<br>用pillow库将图片转为单通道图片并转为矩阵。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">path=<span class="string">r"B.png"</span></span><br><span class="line"></span><br><span class="line">im = Image.open(path).convert(<span class="string">'L'</span>) <span class="comment">#三通道转多通道</span></span><br><span class="line">width = im.size[<span class="number">0</span>]   <span class="comment"># 获取宽度</span></span><br><span class="line">height = im.size[<span class="number">1</span>]   <span class="comment"># 获取高度</span></span><br><span class="line">im2 = im.resize((int(width*<span class="number">1</span>/<span class="number">15</span>), int(height*<span class="number">1</span>/<span class="number">15</span>)), Image.ANTIALIAS)<span class="comment"># 缩小15倍</span></span><br><span class="line">a=np.array(im2)</span><br><span class="line">np.savetxt(<span class="string">"1.txt"</span>,a)<span class="comment"># 颜色矩阵</span></span><br></pre></td></tr></table></figure>得到矩阵后，如果$(i,j)$处小于等于$128$，设置为$1$，否则为0，判断$(x,y)$处是$0$还是$1$即可。</li></ul><ul><li><strong>学军信友队趣味网络邀请赛</strong><br>Final standing:<br><img src="https://img2020.cnblogs.com/blog/1923913/202004/1923913-20200407171551520-907262019.png" alt=""></li><li><p>T1是一道巧妙的构造题。<br><img src="https://img2020.cnblogs.com/blog/1923913/202004/1923913-20200407172734934-1096646969.png" width="30%"><br>对于上面的图，输出遍历完所有点的最短时间以及方案，其中最外圈是单向的，箭头所指即为方向，其余对角线之间的道路都是双向的，长度均为1。<br>可以肯定最短时间是$(n \cdot (n+1))-1$<br>对于奇偶我们采用不同的方法讨论，以$n=4$和$n=5$为例。<br><img src="https://img2020.cnblogs.com/blog/1923913/202004/1923913-20200407173537395-1206679429.png" width="30%"><br>$n=4$的解法<br><img src="https://img2020.cnblogs.com/blog/1923913/202004/1923913-20200407174103656-1303219727.png" width="30%"><br>$n=5$的解法<br>对于$n$为其他数字的情况，和$n=4,5$的构造方法类似，奇偶讨论即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @author:  codancer</span></span><br><span class="line"><span class="comment">* @createTime:  2020-04-05, 13:23:23</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fep(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n*(n+<span class="number">1</span>)<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--) <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">' '</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=n+<span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&amp;<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">' '</span>&lt;&lt;j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">' '</span>&lt;&lt;j+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&amp;<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">' '</span>&lt;&lt;j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">' '</span>&lt;&lt;j<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n+<span class="number">1</span>;j++) <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">' '</span>&lt;&lt;j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=n+<span class="number">1</span>;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(j%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">' '</span>&lt;&lt;j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">' '</span>&lt;&lt;j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n+<span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j&amp;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i<span class="number">-1</span>&lt;&lt;<span class="string">' '</span>&lt;&lt;j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">' '</span>&lt;&lt;j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>T2是一个常见的的树形dp，即计算一棵树中每个节点所能到达的最远距离。<br>令$f[i][0]$为$i$向下走能走到的最远距离,$f[i][1]$是次远距离，同时记录最远距离所经过的子节点，令$f[i][2]$代表最终答案，<br>假设$v$经过了$u$向下走的最大路径，那么$f[v][2]=max(f[u][2],f[u][1])+1$,否则$f[v][2]=max(f[u][2],f[u][0])+1$<br>两次$DFS$转移即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @author:  codancer</span></span><br><span class="line"><span class="comment">* @createTime:  2020-04-05, 13:46:51</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fep(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300000</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line">ll f[N][<span class="number">3</span>];</span><br><span class="line">ll node[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v:G[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line"><span class="keyword">if</span>(f[u][<span class="number">0</span>]&lt;=f[v][<span class="number">0</span>]+<span class="number">1</span>)&#123;</span><br><span class="line">f[u][<span class="number">1</span>]=f[u][<span class="number">0</span>];</span><br><span class="line">f[u][<span class="number">0</span>]=f[v][<span class="number">0</span>]+<span class="number">1</span>;</span><br><span class="line">node[u]=v;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(f[u][<span class="number">1</span>]&lt;f[v][<span class="number">0</span>]+<span class="number">1</span>)&#123;</span><br><span class="line">f[u][<span class="number">1</span>]=f[v][<span class="number">0</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v:G[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(node[u]==v)&#123;</span><br><span class="line">f[v][<span class="number">2</span>]=max(f[u][<span class="number">2</span>],f[u][<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">f[v][<span class="number">2</span>]=max(f[u][<span class="number">2</span>],f[u][<span class="number">0</span>])+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs2(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;ll&gt; <span class="title">w</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;w[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</span><br><span class="line">G[v].pb(u);</span><br><span class="line">G[u].pb(v);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">ans=max(ans,w[i]*max(f[i][<span class="number">2</span>],f[i][<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>2020算法首届算法竞赛网络挑战赛</strong><br>Final result:<br><img src="https://img2020.cnblogs.com/blog/1923913/202004/1923913-20200407174755270-626790370.png" alt=""></li><li><strong>30-Day LeetCoding Challenge</strong><br>前面的题目较为简单，不再赘述。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;An-April-Fool’s-week&quot;&gt;&lt;a href=&quot;#An-April-Fool’s-week&quot; class=&quot;headerlink&quot; title=&quot;An April Fool’s week&quot;&gt;&lt;/a&gt;An April Fool’s week&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="Probelems" scheme="http://yoursite.com/tags/Probelems/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms Weekly 2</title>
    <link href="http://yoursite.com/2020/04/08/Algorithmwk2/"/>
    <id>http://yoursite.com/2020/04/08/Algorithmwk2/</id>
    <published>2020-04-08T02:34:38.385Z</published>
    <updated>2020-04-13T03:44:29.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-slow-week"><a href="#A-slow-week" class="headerlink" title="A slow week"></a>A slow week</h2><a id="more"></a><ul><li><strong>牛客练习赛60 C</strong></li></ul><p>对于一个长度为$n$的字符串$s$,计算有多少个长度为$k$的本质不同的子序列。</p><p><strong>思路</strong><br>$dp_{i,j}$为前$i$个字符组成的字符串中长度为$j$的本质不同的子序列。则有:</p><script type="math/tex; mode=display">dp_{i,j}=dp_{i-1,j-1}+dp_{i-1,j}-dp[last_{s_{i}}-1][j-1]</script><p>其中 $last_{s_{i}}$ 表示 $s_{i}$ 前一次出现的位置。时间复杂度$O(n \cdot k)$</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;A-slow-week&quot;&gt;&lt;a href=&quot;#A-slow-week&quot; class=&quot;headerlink&quot; title=&quot;A slow week&quot;&gt;&lt;/a&gt;A slow week&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="Probems" scheme="http://yoursite.com/tags/Probems/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms Weekly 1</title>
    <link href="http://yoursite.com/2020/04/08/Algorithmwk1/"/>
    <id>http://yoursite.com/2020/04/08/Algorithmwk1/</id>
    <published>2020-04-08T02:31:15.498Z</published>
    <updated>2020-04-13T03:44:32.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-happy-week"><a href="#A-happy-week" class="headerlink" title="A happy week"></a>A happy week</h2><a id="more"></a><ul><li><strong>牛客小白月赛23:Problem G.</strong><br>有一棵包含$n$个节点和$n-1$条边的树，规定树链$(u,v)$为树上从$u$到$v$的简单路径。<br>树的每条边上都有一个正整数，这个正整数被称作这条边的颜色，规定一条树链的权值$w(u,v)$为这条树链上所有边的颜色的代数和。<br>而整棵树的权值为所有不同的树链的权值的代数和。<br>已知所有边的颜色集合恰好为$1$到$n-1$这$n-1$个不同的正整数，请你为每条边安排一种颜色，使得这棵树的权值尽量小，你不需要给出具体方案，只需要求出这个最小的权值即可。<br><strong>思路:</strong><br>计算每条边的贡献:边$(u,v)$的贡献为$(n-siz_{u}) \cdot siz_{u}$，其中$siz_{i}$为$i$节点为根的子树的大小。按贡献从大到小排序后分配给$1,2..,n-1$即可。时间复杂度$O(n\cdot log(n))$</li><li><strong>Leetcode181 T3</strong><br>给定$6$种道路，按照数据所给的$n \cdot m$矩阵排列能否从$(0,0)$到达$(n-1,m-1)$。<br><strong>思路:</strong><br>BFS即可，对于每一块的四周判断可不可以走。</li><li><p><strong>KickStart RoundA T2</strong><br>一个$n \cdot m$的方格阵，每个方格都有一个值，对于每一行来说，你只能从第一块开始拿，不能跳过某一块，整个方阵最多可以拿$k$块，使这$k$块的值的和最大。<br><strong>思路</strong><br>dp，令$dp_{i,j,k}$代表拿到第$i$行，第$i$行拿了$j$个，总共拿了$k$个的最大值。$(nm)^2$转移即可。<br><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @author:  codancer</span></span><br><span class="line"><span class="comment">* @createTime:  time</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fep(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">60</span>][<span class="number">40</span>][<span class="number">2000</span>];<span class="comment">//dp[i][j][k]表示第i行拿j个总共k个的最大值</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[N][N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> pre[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">int</span> cas=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="keyword">int</span> n,k,p;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;p;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">pre[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">rep(j,<span class="number">1</span>,k)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">pre[i][j]=pre[i][j<span class="number">-1</span>]+a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;<span class="comment">//第i行</span></span><br><span class="line">rep(j,<span class="number">0</span>,k)&#123;</span><br><span class="line">rep(u,<span class="number">0</span>,k)&#123;</span><br><span class="line">rep(last,<span class="number">0</span>,p)&#123;</span><br><span class="line">dp[i][j][last+j]=max(dp[i<span class="number">-1</span>][u][last]+pre[i][j],dp[i][j][last+j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">rep(j,<span class="number">0</span>,k)&#123;</span><br><span class="line">ans=max(ans,dp[i][j][p]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>,cas++,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>KickStart RoundA T3</strong><br>$n$个木棒，可以切$k$次，随便切，问切割后最长的木棒最短为多少<br><strong>思路：</strong><br>二分最大值$x$，假设第$i$个木棒的长度为$l_{i}$，则可计算出该木棒至少切割几次才能让最大值小于等于$x$，判断总次数是否小于等于$k$即可。</p></li><li><p><strong>ABC159 E</strong><br>一个$n \cdot m$的矩阵，如果$(i,j)$处为$1$则是白色，为$0$则是黑色，现在你可以对这个矩阵横竖切割，最终要使得切割后的每一块的黑色面积小于等于$k$，计算至少需要多少次。其中$1 \leq n \leq 10, 1\leq m \leq 1000$。<br><strong>思路:</strong><br>$2^{n-1}$枚举横着切的所有情况，贪心的计算竖着的刀数即可。时间复杂度$O(2^{n-1} \cdot n \cdot m)$<br><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @author:  codancer</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fep(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">char</span> maze[<span class="number">20</span>][<span class="number">3000</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">3000</span>][<span class="number">20</span>];<span class="comment">//第j列的前i行的前缀和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;maze[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">c[j][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">c[j][i]=c[j][i<span class="number">-1</span>]+(maze[i][j]-<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;(n<span class="number">-1</span>));i++)&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lc;</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(n<span class="number">-1</span>);j++)&#123;</span><br><span class="line"><span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">lc.pb(j+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> siz=(<span class="keyword">int</span>)lc.size();</span><br><span class="line">now+=siz;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; sq;<span class="comment">//第i块的区间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(siz==<span class="number">0</span>)&#123;<span class="comment">//不切 </span></span><br><span class="line">sq.pb(&#123;<span class="number">1</span>,n&#125;);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">sq.pb(&#123;<span class="number">1</span>,lc[<span class="number">0</span>]&#125;);</span><br><span class="line">rep(j,<span class="number">1</span>,siz<span class="number">-1</span>)&#123;</span><br><span class="line">sq.pb(&#123;lc[j<span class="number">-1</span>]+<span class="number">1</span>,lc[j]&#125;);</span><br><span class="line">&#125; </span><br><span class="line">sq.pb(&#123;lc[siz<span class="number">-1</span>]+<span class="number">1</span>,n&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先检验横着划分的可行性 </span></span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">rep(d,<span class="number">0</span>,siz)&#123;</span><br><span class="line"><span class="keyword">int</span> up=sq[d].first;</span><br><span class="line"><span class="keyword">int</span> down=sq[d].second;</span><br><span class="line"><span class="keyword">if</span>(c[j][down]-c[j][up<span class="number">-1</span>]&gt;k)&#123;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout&lt;&lt;sq.size()&lt;&lt;' '&lt;&lt;now&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//for(auto v:sq)&#123;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;v.first&lt;&lt;"---"&lt;&lt;v.second&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">tmp</span><span class="params">(siz+<span class="number">1</span>,<span class="number">0</span>)</span></span>;<span class="comment">//第i块当前白色的数量 </span></span><br><span class="line">rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">bool</span> ok=<span class="number">1</span>;</span><br><span class="line">rep(d,<span class="number">0</span>,siz)&#123;</span><br><span class="line"><span class="keyword">int</span> up=sq[d].first;</span><br><span class="line"><span class="keyword">int</span> down=sq[d].second;</span><br><span class="line"><span class="keyword">if</span>(tmp[d]+c[j][down]-c[j][up<span class="number">-1</span>]&gt;k)&#123;</span><br><span class="line">ok=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">tmp[d]+=(c[j][down]-c[j][up<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ok==<span class="number">0</span>)&#123;</span><br><span class="line">++now;</span><br><span class="line">rep(d,<span class="number">0</span>,siz)&#123;</span><br><span class="line"><span class="keyword">int</span> up=sq[d].first;</span><br><span class="line"><span class="keyword">int</span> down=sq[d].second;</span><br><span class="line">tmp[d]=c[j][down]-c[j][up<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=min(ans,now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;A-happy-week&quot;&gt;&lt;a href=&quot;#A-happy-week&quot; class=&quot;headerlink&quot; title=&quot;A happy week&quot;&gt;&lt;/a&gt;A happy week&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="Problems" scheme="http://yoursite.com/tags/Problems/"/>
    
  </entry>
  
  <entry>
    <title>对主席树的理解以及使用</title>
    <link href="http://yoursite.com/2020/04/07/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    <id>http://yoursite.com/2020/04/07/%E4%B8%BB%E5%B8%AD%E6%A0%91/</id>
    <published>2020-04-07T14:14:14.936Z</published>
    <updated>2020-04-08T02:21:24.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对主席树的理解以及使用"><a href="#对主席树的理解以及使用" class="headerlink" title="对主席树的理解以及使用"></a>对主席树的理解以及使用</h1> <a id="more"></a><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>一个长度为$n$的数组，有$m$次查询，每次查询区间$[l,r]$内第$k$小的元素。</p><p>如果使用暴力，肯定不可以</p><p>使用线段树？可是我只会查询区间最值啊。</p><p>那么我们把问题再次简化一下，查询$[1,n]$第$k$小的元素，要求使用线段树来实现。</p><h2 id="权值线段树"><a href="#权值线段树" class="headerlink" title="权值线段树"></a>权值线段树</h2><p>为了解决这个问题，我们引入一个名词:<strong>权值线段树</strong>。那么权值线段树是如何解决上面那个问题的呢？</p><p>首先，我们对数组进行离散化处理，离散成为$[1,n]$，然后我们建一颗线段树，线段树的节点存放的即为对应区间的数的个数。</p><p>比如数组$a={3,3,2,2}$,经过离散化后变为$2,2,1,1$。</p><p>对应的线段树即为：</p><p> <img src="https://i.loli.net/2019/07/30/5d3feb07f205312086.png" alt=""></p><p>建好线段树之后我们如何求解第$k$小元素呢？我们从根节点出发，看下它的左儿子的元素个数是否超过了$k$，如果超过了$k$，那么第$k$小一定是左儿子的第$k$小，我们直接去访问左儿子，否则，假设左儿子的节点为$num$，那么第$k$小一定是右儿子的第$k-num$小，我们去访问右儿子，直到递归终止，我们便找到了第$k$小元素。</p><h2 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h2><p>当我们解决了上一个问题，我们这样考虑：</p><p>每输入一个数字$a_i$，就建一棵$[1,i]$的权值线段树，那么如果要查询$[l,r]$的区间第$k$小，直接让这两棵权值线段树做差，然后进行我们上面设计的算法，问题不久迎刃而解了吗？</p><p>但是，每建一棵树，这样$n$棵树的空间会达到$O(n^2)$的级别，空间是无法承受的。我们这样想，假设你输入了$a_i$，并且你已经建好了$a_{i-1}$的线段树，是不是$a_i$和$a_{i-1}$的线段树只会有$log$级别的点是不同的，剩下的大部分都是完全一致的。利用这个性质，我们不再开辟新的线段树，而是先把$a_i$会改变掉的节点复制一份，然后对复制的节点进行修改，连接到上次构建好的线段树上，这样我们只用了$log$的空间。最终我们构造的这棵树就叫主席树（其实已经不是一棵树了）。点的个数最多为$O(nlog(n))$。</p><h2 id="建立过程"><a href="#建立过程" class="headerlink" title="建立过程"></a>建立过程</h2><p>对于数组$a:3,3,2,2$建立主席树:</p><p>第一步：离散化为$2,2,1,1$<br>第二步：输入$2$，构造权值线段树</p><p><img src="https://i.loli.net/2019/07/30/5d3ff004ecc4522556.png" alt=""></p><p>第三步：输入2</p><p><img src="https://i.loli.net/2019/07/30/5d3ff0bc8bb4530476.png" alt="2.png"></p><p>第四步:输入1</p><p><img src="https://i.loli.net/2019/07/30/5d3ff2433ccd810571.png" alt="3.png"></p><p>第五步:输入1</p><p><img src="https://i.loli.net/2019/07/30/5d3ff2e2ec71e19358.png" alt="4.png"></p><p>这样我们就构造了一个主席树（有点丑），然后对于要查询的区间$[l,r]$，我们只需要从他们各自的”根”出发，递归做差寻找第$k$大即可。图中四个根分别为$1,4,7,10$。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N = <span class="number">5e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; v;</span><br><span class="line">ll a[N],roots[N],cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">ll l,r,num;</span><br><span class="line">&#125;T[N*<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll l,ll r,ll &amp;x,ll y,ll pos)</span></span>&#123;</span><br><span class="line">T[++cnt]=T[y];T[cnt].num++;x=cnt;<span class="comment">//复制节点并且更新</span></span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(mid&gt;=pos) update(l,mid,T[x].l,T[y].l,pos);</span><br><span class="line"><span class="keyword">else</span> update(mid+<span class="number">1</span>,r,T[x].r,T[y].r,pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll l,ll r,ll x,ll y,ll k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">ll sum=T[T[y].l].num-T[T[x].l].num;</span><br><span class="line">ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;=k) <span class="keyword">return</span> query(l,mid,T[x].l,T[y].l,k);<span class="comment">//第$k$小在左子树</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(mid+<span class="number">1</span>,r,T[x].r,T[y].r,k-sum);<span class="comment">//在右子树</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">getid</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> lower_bound(v.begin(),v.end(),x)-v.begin()+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line">ll n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]),v.push_back(a[i]);</span><br><span class="line">sort(v.begin(),v.end());</span><br><span class="line"></span><br><span class="line">v.erase(unique(v.begin(),v.end()),v.end());<span class="comment">//离散化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) update(<span class="number">1</span>,n,roots[i],roots[i<span class="number">-1</span>],getid(a[i]));</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">ll l,r,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,v[query(<span class="number">1</span>,n,roots[l<span class="number">-1</span>],roots[r],k)<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对主席树的理解以及使用&quot;&gt;&lt;a href=&quot;#对主席树的理解以及使用&quot; class=&quot;headerlink&quot; title=&quot;对主席树的理解以及使用&quot;&gt;&lt;/a&gt;对主席树的理解以及使用&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>浅谈序列自动机</title>
    <link href="http://yoursite.com/2020/04/07/SuATM/"/>
    <id>http://yoursite.com/2020/04/07/SuATM/</id>
    <published>2020-04-07T14:14:14.928Z</published>
    <updated>2019-07-24T01:05:38.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈序列自动机"><a href="#浅谈序列自动机" class="headerlink" title="浅谈序列自动机"></a>浅谈序列自动机</h1><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>序列自动机是一个可以快速判断字符串$t$是否是字符串$s$的子串的一个算法。</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>对$s$构造序列自动机，使用$Nxt_{i,j}$代表从第$i$个位置开始，字符$j$出现的第一个位置。我们倒着遍历更新即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int nxt[N][27];</span><br><span class="line">void init(char *s)&#123;</span><br><span class="line">int l&#x3D;strlen(s);</span><br><span class="line">for(int i&#x3D;0;i&lt;26;i++) nxt[l][i]&#x3D;INF;</span><br><span class="line">for(int i&#x3D;l-1;i&gt;&#x3D;0;i--)&#123;</span><br><span class="line">for(int j&#x3D;0;j&lt;26;j++)&#123;</span><br><span class="line">nxt[i][j]&#x3D;nxt[i+1][j];</span><br><span class="line">&#125;</span><br><span class="line">nxt[i][s[i]-&#39;a&#39;]&#x3D;i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>设置初始指针$p$为-1，每次让$p$跳到$Nxt_{p+1,j}$上面，$j$为当前查询的字符，如果$p$为$INF$,则说明找不到下一个字符，即$t$不是$s$的子串。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line">pos=nxt[pos+<span class="number">1</span>][t[i]-<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">if</span>(pos==INF) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sub_AM</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> nxt[N][<span class="number">27</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) nxt[l][i]=INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=l<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">nxt[i][j]=nxt[i+<span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">nxt[i][s[i]-<span class="string">'a'</span>]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line">pos=nxt[pos+<span class="number">1</span>][t[i]-<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">if</span>(pos==INF) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;solve;</span><br></pre></td></tr></table></figure><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><p><a href="https://nanti.jisuanke.com/t/38232" target="_blank" rel="noopener">计蒜客 Subsquenece</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">char</span> t[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sub_AM</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> nxt[N][<span class="number">27</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) nxt[l][i]=INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=l<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">nxt[i][j]=nxt[i+<span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">nxt[i][s[i]-<span class="string">'a'</span>]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line">pos=nxt[pos+<span class="number">1</span>][t[i]-<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">if</span>(pos==INF) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;solve;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">solve.init(s);</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,t);</span><br><span class="line"><span class="keyword">if</span>(solve.find(t))&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浅谈序列自动机&quot;&gt;&lt;a href=&quot;#浅谈序列自动机&quot; class=&quot;headerlink&quot; title=&quot;浅谈序列自动机&quot;&gt;&lt;/a&gt;浅谈序列自动机&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="字符串算法" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2019牛客暑期多校D.Big Integer</title>
    <link href="http://yoursite.com/2020/04/07/nowcoder3D/"/>
    <id>http://yoursite.com/2020/04/07/nowcoder3D/</id>
    <published>2020-04-07T14:14:14.925Z</published>
    <updated>2019-08-05T12:31:12.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019牛客暑期多校D-Big-Integer"><a href="#2019牛客暑期多校D-Big-Integer" class="headerlink" title="2019牛客暑期多校D.Big Integer"></a>2019牛客暑期多校D.Big Integer</h1><a id="more"></a><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a><a href="https://ac.nowcoder.com/acm/contest/883/D" target="_blank" rel="noopener">题面</a></h2><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>定义$A(n)$为$n$个1构成的数字，如$A(3)=111$，计算有多少对$(i,j)$使得$A(i^j) \% p = 0$。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>通过枚举发现是有上面的等式是有循环节的，而且循环节是$p-1$的因子，因此暴力枚举计算出循环节$d$，接下来就是求有多少对$i^j \% d=0$。<br>将$d$进行质因子分解，得</p><script type="math/tex; mode=display">d={p_1}^{q_1} \cdot {p_2}^{q_2} \cdot {p_3}^{q_3} ...{p_k}^{q_k}</script><p>那么要使$i^j \%d = 0$，则$i$必须为</p><script type="math/tex; mode=display">g={p_1}^{\lceil {\frac{q_1}{j}} \rceil} \cdot {p_2}^{\lceil {\frac{q_2}{j}} \rceil} \cdot {p_3}^{\lceil {\frac{q_3}{j}} \rceil} ...{p_k}^{\lceil {\frac{q_k}{j}} \rceil}</script><p>的倍数。因此一共有$\frac{n}{g}$个合法的$i$<br>由于$q_i \leq 30$，因此$j$在$30$之后和$30$的答案相同，因此$j$只需要枚举到$[1,30]$，分别计算出$g$的值。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qpow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans=(ans%mod*a%mod)%mod;</span><br><span class="line">        a=(a%mod*a%mod)%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans=(ans*a);</span><br><span class="line">a=(a*a);</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="comment">//freopen("1.in","r",stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> p,n,m;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; pr;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> re;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;p,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="number">2</span>||p==<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;n/<span class="number">3</span>*m&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; all;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=p<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((p<span class="number">-1</span>)%i==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i*i==p<span class="number">-1</span>) all.push_back(i);</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    all.push_back(i);</span><br><span class="line">                    all.push_back((p<span class="number">-1</span>)/i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        all.push_back(p<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> id;<span class="comment">//循环节</span></span><br><span class="line">        sort(all.begin(),all.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:all)&#123;<span class="comment">//找到循环节</span></span><br><span class="line">            <span class="keyword">if</span>((qpow(<span class="number">10</span>,v,p))%p==<span class="number">1</span>)&#123;</span><br><span class="line">                id=v;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; nums;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=id;i++)&#123;<span class="comment">//质因子分解</span></span><br><span class="line">            <span class="keyword">if</span>(id%i==<span class="number">0</span>)&#123;</span><br><span class="line">             <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">                pr.push_back(i);</span><br><span class="line">                <span class="keyword">while</span>(id%i==<span class="number">0</span>)&#123;</span><br><span class="line">                 id/=i;</span><br><span class="line">                 num++;</span><br><span class="line">                &#125;</span><br><span class="line">                nums.push_back(num);</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(id!=<span class="number">1</span>)&#123;</span><br><span class="line">         pr.push_back(id);</span><br><span class="line">         nums.push_back(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> g;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j=<span class="number">1</span>;j&lt;=min((<span class="keyword">long</span> <span class="keyword">long</span>)m,(<span class="keyword">long</span> <span class="keyword">long</span>)<span class="number">30</span>);j++)&#123;</span><br><span class="line">        g=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)nums.size();i++)&#123;</span><br><span class="line">        g*=qp(pr[i],(nums[i]+j<span class="number">-1</span>)/j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">30</span>) ans+=(n/g)*(m<span class="number">-29</span>);</span><br><span class="line">        <span class="keyword">else</span> ans+=n/g;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2019牛客暑期多校D-Big-Integer&quot;&gt;&lt;a href=&quot;#2019牛客暑期多校D-Big-Integer&quot; class=&quot;headerlink&quot; title=&quot;2019牛客暑期多校D.Big Integer&quot;&gt;&lt;/a&gt;2019牛客暑期多校D.Big Integer&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>矩阵分解推荐算法（LMF）</title>
    <link href="http://yoursite.com/2020/04/07/MF/"/>
    <id>http://yoursite.com/2020/04/07/MF/</id>
    <published>2020-04-07T14:14:14.922Z</published>
    <updated>2019-05-21T13:17:17.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="矩阵分解推荐算法（LMF）"><a href="#矩阵分解推荐算法（LMF）" class="headerlink" title="矩阵分解推荐算法（LMF）"></a>矩阵分解推荐算法（LMF）</h1><a id="more"></a><p>首先我们现在有一个矩阵$R_{mn}$，其中$R_{ij}$代表第$i$个用户对第$j$个商品的喜爱程度。</p><p>$LMF$算法认为每个商品上面都有一些隐因子，而顾客的喜爱程度是由这些隐因子来决定的。因此便可以将$R_{mn}$分解成$P_{mF} \times Q_{Fn}$的形式。<br>矩阵$P_{mF}$代表了这$m$个用户对$F$个隐因子的喜爱程度，$Q_{Fn}$代表这$F$个隐因子在这$n$个商品上的分布概率。</p><center>$R'_{ij}=\sum_{f=1}^F {P_{if}Q_{fj}}$ </center>我们最终的目的是使得$R_{ij}$和$R'_ {ij}$尽可能的相近。因此，损失函数为:<center>$f(P,Q)=\sum{(R_{ij}-R'_{ij})^2}$ </center><p>为了防止过拟合，需要加上一个正则项来防止$P_{if},Q_{fj}$过小或过大。</p><center>$f(P,Q)=\sum{(R_{ij}-R'_{ij})^2}+\lambda(\sum{(P_{if}^2}+\sum{Q_{fj}^2})$ </center><p>接下来就是对这个函数用梯度下降进行拟合，递推式为：</p><center>$P_{k+1}=P_{k}-\alpha\frac{\partial f(P,Q)}{\partial P_k}$ </center><center>$Q_{k+1}=Q_{k}-\alpha\frac{\partial f(P,Q)}{\partial Q_k}$ </center><p>这样我们采用梯度下降算法即可获得$R’$矩阵<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="comment">##将R_nm分解成P_nk*Q_km</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MF</span><span class="params">(R,P,Q,K,times=<span class="number">100000</span>,alp=<span class="number">0.0001</span>,lb=<span class="number">0.01</span>)</span>:</span></span><br><span class="line">  <span class="comment">#  Q=Q.T</span></span><br><span class="line">    <span class="keyword">for</span> steps <span class="keyword">in</span> range(times):<span class="comment"># 迭代次数</span></span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> range(len(R)):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(R[u])):</span><br><span class="line">                <span class="keyword">if</span> R[u][i]&gt;<span class="number">0</span>:</span><br><span class="line">                    delta=R[u][i]-numpy.dot(P[u,:],Q[:,i])</span><br><span class="line">                <span class="keyword">for</span> f <span class="keyword">in</span> range(K):</span><br><span class="line">                    P[u][f]=P[u][f]+<span class="number">2</span>*alp*(delta*Q[f][i]-lb*P[u][f])<span class="comment">#递推运算</span></span><br><span class="line">                    Q[f][i]=Q[f][i]+<span class="number">2</span>*alp*(delta*P[u][f]-lb*Q[f][i])</span><br><span class="line">    <span class="keyword">return</span> P,Q</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    R=[</span><br><span class="line">        [<span class="number">5</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">        [<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">5</span>],</span><br><span class="line">        [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>],</span><br><span class="line">        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">    ]</span><br><span class="line">    K=<span class="number">2</span></span><br><span class="line">    n=len(R)</span><br><span class="line">    m=len(R[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">##随机生成P,Q矩阵</span></span><br><span class="line">    P=numpy.random.rand(n,K)</span><br><span class="line">    Q=numpy.random.rand(K,m)</span><br><span class="line">    <span class="comment">##矩阵分解</span></span><br><span class="line">    ansp,ansq=MF(R,P,Q,K)</span><br><span class="line">    ansR=numpy.dot(ansp,ansq)</span><br><span class="line">    print(ansR)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;矩阵分解推荐算法（LMF）&quot;&gt;&lt;a href=&quot;#矩阵分解推荐算法（LMF）&quot; class=&quot;headerlink&quot; title=&quot;矩阵分解推荐算法（LMF）&quot;&gt;&lt;/a&gt;矩阵分解推荐算法（LMF）&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>网络流24题</title>
    <link href="http://yoursite.com/2020/04/07/Maxflow/"/>
    <id>http://yoursite.com/2020/04/07/Maxflow/</id>
    <published>2020-04-07T14:14:14.920Z</published>
    <updated>2019-10-10T08:45:25.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络流24题"><a href="#网络流24题" class="headerlink" title="网络流24题"></a>网络流24题</h1><a id="more"></a><h2 id="搭配飞行员"><a href="#搭配飞行员" class="headerlink" title="搭配飞行员"></a><a href="https://loj.ac/problem/6000" target="_blank" rel="noopener">搭配飞行员</a></h2><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>二分图最大匹配，从$S$往每个正驾驶连接一条流量为$1$的边，从每个副驾驶往$T$连接一条流量为$1$的边，两个可以配合的飞行员之间连接一条流量为$1$的边,跑最大流即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> S,T,n,m,w[N],dep[N],head[N],to[N],num=<span class="number">1</span>,sum=<span class="number">0</span>,x,nxt[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> ww)</span></span>&#123;</span><br><span class="line">    num++;</span><br><span class="line">    to[num]=v;nxt[num]=head[u];w[num]=ww;head[u]=num;</span><br><span class="line">    num++;</span><br><span class="line">    to[num]=u;nxt[num]=head[v];w[num]=<span class="number">0</span>;head[v]=num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">    vis[S]=<span class="number">1</span>;q.push(S);dep[S]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(vis[v]||w[i]&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">            vis[v]=<span class="number">1</span>;q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vis[T];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==T||d==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(dep[v]!=dep[u]+<span class="number">1</span>||w[i]&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> flow=dfs(v,min(d,w[i]));</span><br><span class="line">        d-=flow;ret+=flow;</span><br><span class="line">        w[i]-=flow;w[i^<span class="number">1</span>]+=flow;</span><br><span class="line">        <span class="keyword">if</span>(d==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ret==<span class="number">0</span>) dep[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    S=<span class="number">0</span>;T=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) add(S,i,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=m+<span class="number">1</span>;i&lt;=n;i++) add(i,T,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v))&#123;</span><br><span class="line">        add(u,v,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(bfs()) sum+=dfs(S,INF);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="太空飞行计划"><a href="#太空飞行计划" class="headerlink" title="太空飞行计划"></a><a href="https://loj.ac/problem/6001" target="_blank" rel="noopener">太空飞行计划</a></h2><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>最大权闭合子图，设$V’$为$G(V,E)$的一个点集，如果$V$中对于每个点的所有的出边所到达的点也$\in V’$，那么$V’$即为一个闭合子图，最大权闭合子图即为所有的闭合子图中权值和最大的。</p><p>定理：从$S$向所有权值为正数的点增加一条等于该点点权的流量的边，从所有权值为负数的点向$T$增加一条等于该点权绝对值流量的边，对于$u(w_{u}&gt;0)$，假设完成$u$需要集合$I_{u}$，则对$v \in I_{u}$连接一条权值流量为$inf$的边，跑一边最小割即可。</p><p>意义：割掉$S-&gt;u$代表不进行任务$u$，割掉$v-&gt;T$代表需要使用$v$，最后$S$可达的即为要选择的。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> S,T,n,m,w[N],dep[N],head[N],to[N],num=<span class="number">1</span>,sum=<span class="number">0</span>,x,nxt[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> ww)</span></span>&#123;</span><br><span class="line">    num++;</span><br><span class="line">    to[num]=v;nxt[num]=head[u];w[num]=ww;head[u]=num;</span><br><span class="line">    num++;</span><br><span class="line">    to[num]=u;nxt[num]=head[v];w[num]=<span class="number">0</span>;head[v]=num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">    vis[S]=<span class="number">1</span>;q.push(S);dep[S]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(vis[v]||w[i]&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">            vis[v]=<span class="number">1</span>;q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vis[T];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==T||d==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(dep[v]!=dep[u]+<span class="number">1</span>||w[i]&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> flow=dfs(v,min(d,w[i]));</span><br><span class="line">        d-=flow;ret+=flow;</span><br><span class="line">        w[i]-=flow;w[i^<span class="number">1</span>]+=flow;</span><br><span class="line">        <span class="keyword">if</span>(d==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ret==<span class="number">0</span>) dep[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">1000</span>],p[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    S=n+m+<span class="number">1</span>;T=n+m+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i]);</span><br><span class="line">        sum+=p[i];</span><br><span class="line">        add(S,i,p[i]);</span><br><span class="line">        <span class="keyword">while</span>(getchar()==<span class="string">' '</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            add(i,n+x,INF);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i]);</span><br><span class="line">         add(i+n,T,c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(bfs()) sum-=dfs(S,INF);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; task,<span class="built_in">exp</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i])&#123;</span><br><span class="line">             task.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=n+m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]) <span class="built_in">exp</span>.push_back(i-n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,task[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;(<span class="keyword">int</span>)task.size();i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d"</span>,task[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="built_in">exp</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;(<span class="keyword">int</span>)<span class="built_in">exp</span>.size();i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d"</span>,<span class="built_in">exp</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小路径覆盖"><a href="#最小路径覆盖" class="headerlink" title="最小路径覆盖"></a><a href="https://loj.ac/problem/6002" target="_blank" rel="noopener">最小路径覆盖</a></h2><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><p>假设$x,y$之间有一条边，则把$x$和$y$分别拆成$x_1,x_2,y_1,y_2$。在$x_1$和$y_2$之间连接一条流量为$1$的边，构造好二分图后答案即为$n-maxmatch$。对于方案的输出，可以利用并查集，对于$x$和$y$，如果流量流经$x-&gt;y$，则$x-&gt;y$在一条路径上，最后$O(n^2)$输出即可。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> S,T,n,m,w[N],to[N],dep[N],head[N],nxt[N],num=<span class="number">1</span>,u,v,pre[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> ww)</span></span>&#123;</span><br><span class="line">    num++;</span><br><span class="line">    to[num]=v;nxt[num]=head[u];w[num]=ww;head[u]=num;</span><br><span class="line">    num++;</span><br><span class="line">    to[num]=u;nxt[num]=head[v];w[num]=<span class="number">0</span>;head[v]=num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    dep[S]=<span class="number">0</span>;</span><br><span class="line">    vis[S]=<span class="number">1</span>;</span><br><span class="line">    q.push(S);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(vis[v]||w[i]&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            vis[v]=<span class="number">1</span>;</span><br><span class="line">            dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">            q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vis[T];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==T||d==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(dep[v]!=dep[u]+<span class="number">1</span>||w[i]&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> flow=dfs(v,min(w[i],d));<span class="comment">//增广的流量</span></span><br><span class="line">        d-=flow;ret+=flow;</span><br><span class="line">        w[i]-=flow;w[i^<span class="number">1</span>]+=flow;</span><br><span class="line">        <span class="keyword">if</span>(d==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ret==<span class="number">0</span>)&#123;<span class="comment">//无法增广</span></span><br><span class="line">        dep[u]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> par[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2</span>*n+<span class="number">1</span>;i++) par[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==par[x]?x:par[x]=find(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x=find(x);y=find(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span> ;</span><br><span class="line">    par[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    S=<span class="number">0</span>;T=<span class="number">2</span>*n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</span><br><span class="line">        add(u,v+n,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) add(S,i,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++) add(i,T,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(bfs()) ans-=dfs(S,INF);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=head[i];j;j=nxt[j])&#123;</span><br><span class="line">            <span class="keyword">if</span>(to[j]&amp;&amp;!w[j]&amp;&amp;to[j]&lt;=<span class="number">2</span>*n)&#123;<span class="comment">//如果i-&gt;to[j]还有流量</span></span><br><span class="line">                unite(i,to[j]-n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)&#123;</span><br><span class="line">        <span class="keyword">bool</span> check=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(find(j)==i)&#123;</span><br><span class="line">                check=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(check) <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;网络流24题&quot;&gt;&lt;a href=&quot;#网络流24题&quot; class=&quot;headerlink&quot; title=&quot;网络流24题&quot;&gt;&lt;/a&gt;网络流24题&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>数论知识点总结</title>
    <link href="http://yoursite.com/2020/04/07/Math/"/>
    <id>http://yoursite.com/2020/04/07/Math/</id>
    <published>2020-04-07T14:14:14.912Z</published>
    <updated>2019-05-02T03:55:34.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数论知识点总结"><a href="#数论知识点总结" class="headerlink" title="数论知识点总结"></a>数论知识点总结</h1><a id="more"></a><h2 id="1-gcd-（最大公约数）"><a href="#1-gcd-（最大公约数）" class="headerlink" title="$1.gcd$（最大公约数）"></a>$1.gcd$（最大公约数）</h2><p>对于给出的两个数$a,b$，我们可以用欧几里得算法来计算最大公约数。欧几里得算法的精髓就在于下面这个公式：<br>$gcd(a,b)=gcd(b,a$%$b)$</p><p>证明：<br>已知：$gcd(a,b)|a$并且$gcd(a,b)|b$,设$a$%$b=r$,则$a=r+kb$,故$r=a-kb$,根据同余关系可得：$r$%$gcd(a,b)=0$,因此$gcd(a,b)=gcd(b,a$%$b)$</p><p>code：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b?gcd(b,a%b):a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-exgcd-（扩展欧几里得算法）"><a href="#2-exgcd-（扩展欧几里得算法）" class="headerlink" title="$2.exgcd$（扩展欧几里得算法）"></a>$2.exgcd$（扩展欧几里得算法）</h2><p>扩展欧几里得算法是用于求解$ax+by=gcd(a,b)$的一组解的算法。<br>根据欧几里得算法我们可知：$gcd(a,b)=gcd(b,a$%$b)$<br>我们假设$x1,y1$是满足条件的一组解</p><p>那么$ax1+by1=gcd(a,b)$</p><p>而$gcd(a,b)=gcd(b,a$%$b)$</p><p>故$ax1+by1=bx2+a$%$by2$</p><p>而$a$%$b=a-a/b\ast b$</p><p>因而$ax1+by1=bx2+ay2-a/b\ast by2=ay2+b*(x2-<br>a/b\ast y2)$</p><p>那么我们就得到了一组合法的$x1,y1$的解：</p><p>$x1=y2,y1=x2-a/b\ast y2$</p><p>也就是我们递归下去即可。当$b=0$的时候我们就可以发现$x=1,y=0$是合法的</p><p>这是我们再返回$x=1,y=0$。最后就一直会回溯下去，得到我们的$x1,y1$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    exgcd(b,a%b)</span><br><span class="line">    <span class="keyword">int</span> temp=x;</span><br><span class="line">    x=y;y=temp-a/b*x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>但是如果要求$ax+by=gcd(a,b)$的最小整数解的时候，我们就要对$x$批量的加上$b$的倍数，但是这不会影响最终的结果。</p><p>因为$ax+by+kab-kab=a(x+kb)+b*(y-ka)$，这样依旧是合法的。</p><p>因此我们直接让$x=(x$%$b+b)$%$b$即为最终的答案。</p><h2 id="3-逆元"><a href="#3-逆元" class="headerlink" title="$3.$逆元"></a>$3.$逆元</h2><p>对于$a$和$m$，如果$ax\equiv1(modm)$,那么称$x$是$a$在$m$下的逆元。</p><p>那么我们该怎么求解逆元呢？我们将逆元的等式转化一下:<br>$ax+my=1$</p><p>由于$ax+my=k$有解当且仅当$k$%$gcd(a,m)=0$的时候有解，说明$gcd(a,m)=1$</p><p>那么我们直接用扩展欧几里得求解即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    exgcd(b,a%b)</span><br><span class="line">    <span class="keyword">int</span> temp=x;</span><br><span class="line">    x=y;y=temp-a/b*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> m)</span></span>&#123;<span class="comment">//a在m下的逆元</span></span><br><span class="line">    exgcd(a,m);</span><br><span class="line">    <span class="keyword">return</span> (x%m+m)%m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>逆元一般是用在除法取模上面，如$(a/b)$%$m$即为$a$%$m\ast inv(b,m)$</p><h2 id="4-埃拉托斯特尼筛法"><a href="#4-埃拉托斯特尼筛法" class="headerlink" title="$4.$埃拉托斯特尼筛法"></a>$4.$埃拉托斯特尼筛法</h2><p>埃拉托斯特尼筛法是一个复杂度为$nlnnlnn$的筛法。<br>当选中一个数为素数的时候，就把以这个数为因子的数全部筛掉即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pr;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seive</span><span class="params">()</span></span>&#123;</span><br><span class="line">vis[<span class="number">0</span>]=vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N<span class="number">-10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">pr.push_back(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>*i;j&lt;=N<span class="number">-10</span>;j+=i) vis[j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-费马小定理"><a href="#5-费马小定理" class="headerlink" title="$5.$费马小定理"></a>$5.$费马小定理</h2><p>假设$a$是一个整数，$p$是一个质数，那么$a^p-a$是$p$的倍数</p><p>即$a^p\equiv a(modp)$,如果$a$不是$p$的倍数，这个定理也可以写成:</p><p>$a^{p-1}\equiv1(modp)$</p><h2 id="6-线性同余方程求解"><a href="#6-线性同余方程求解" class="headerlink" title="$6.$线性同余方程求解"></a>$6.$线性同余方程求解</h2><p>形如$ax\equiv b(modm)$即为线性同余方程。<br>将线性同余方程变形后即可得到：</p><p>$ax+my=b$<br>只有当$b$%$gcd(a,m)=0$时该方程才有解。<br>我们先利用扩展欧几里得算法求出</p><p>$ax+my=gcd(a,m)$的一组解$(x0,y0)$,那么$x=x0*(b/gcd(a,m))$%$m$<br>即为原方程的一组解。</p><h2 id="7-欧拉函数"><a href="#7-欧拉函数" class="headerlink" title="$7.$欧拉函数"></a>$7.$欧拉函数</h2><p>欧拉函数即为小于$n$的数中与$n$互质的数的个数<br>比如$\varphi(8)=4$<br>欧拉函数的通式为:</p><p>$\varphi(x)=x(1-\frac{1}{p1})(1-\frac{1}{p2})…(1-\frac{1}{pn})$</p><p>其中$p1,p2,…pn$为$x$的质因数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数论知识点总结&quot;&gt;&lt;a href=&quot;#数论知识点总结&quot; class=&quot;headerlink&quot; title=&quot;数论知识点总结&quot;&gt;&lt;/a&gt;数论知识点总结&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>拉格朗日插值的应用</title>
    <link href="http://yoursite.com/2020/04/07/lagrange/"/>
    <id>http://yoursite.com/2020/04/07/lagrange/</id>
    <published>2020-04-07T14:14:14.908Z</published>
    <updated>2019-06-03T11:37:16.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拉格朗日插值的应用"><a href="#拉格朗日插值的应用" class="headerlink" title="拉格朗日插值的应用"></a>拉格朗日插值的应用</h1><a id="more"></a><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><p>什么是拉格朗日插值？假设我们现在有三个点 $(x_1,y_1),(x_2,y_2),(x_3,y_3)$，现在我们要找一条唯一的二次曲线刚好经过这三个点。</p><p>拉格朗日给出了一个绝妙的方法，他把我们要求的曲线的表达式等同于三个函数的累加。具体是这么操作的：</p><p>第一个函数保证$f_1(x_1)=1,f_1(x_2)=f_1(x_3)=0$<br><img src="https://pic2.zhimg.com/80/v2-085cca3fb3f1c23c1975b73d7950d138_hd.jpg" alt="$f_1(x)$"><br>第二个函数保证$f_2(x_2)=1,f_2(x_1)=f_2(x_3)=0$<br><img src="https://pic4.zhimg.com/v2-c956818e984bd46c5c9f5d45f7944b3a_r.jpg" alt="$f_2(x)$"><br>第三个函数保证$f_3(x_3)=1,f_3(x_1)=f_3(x_2)=0$<br><img src="https://pic1.zhimg.com/80/v2-276e27d2c27f49cbdf6916468aa497ce_hd.jpg" alt="$f_3(x)$"><br>那么我们所要求的函数即为:</p><center>$f(x)=y1f_{1}(x)+y2f_{2}(x)+y3f_{3}(x)$ </center>可以保证的是这个函数同时经过$(x_1,y_1),(x_2,y_2),(x_3,y_3)$并且是唯一的满足条件的二次函数。## 公式：如果上面的部分你看懂了，那么你已经掌握了拉格朗日插值的用法和思想。接下来我们要做的就是寻找一个公式使得利用现在已有的$n$个点，来推导出$n-1$次的函数。那么这个函数为:<center>$f(x)=\sum_{i=1}^ny_i\prod_{j=1,j\neq i}^n\frac{x-x_j}{x_i-x_j}$ </center><h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><p>一般情况下拉格朗日插值的复杂度是$O(n^2)$，即：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">ll x,y;</span><br><span class="line">&#125;p[N];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll mod)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</span><br><span class="line">ans=(ans%mod*a%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">a=(a%mod*a%mod)%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Lagrange</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;<span class="comment">//</span></span><br><span class="line">ll base1=<span class="number">1</span>;</span><br><span class="line">ll base2=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//lj(k)基函数 </span></span><br><span class="line"><span class="keyword">if</span>(j==i) <span class="keyword">continue</span>;</span><br><span class="line">base1=(base1%mod*((k-p[i].x)%mod+mod)%mod)%mod;</span><br><span class="line">base2=(base2%mod*((p[j].x-p[i].x)%mod+mod)%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">ans=(ans%mod+(p[j].y%mod*base1%mod*qpow(base2,mod<span class="number">-2</span>,mod)%mod)%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;Lagrange(k)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果已知的坐标是连续的话，那么我们可以通过预处理使得复杂度变为$O(n)$,代码以<a href="https://codeforces.com/contest/622/problem/F" target="_blank" rel="noopener">codeforces 622F</a>为例。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll p[N],x[N],s1[N],s2[N],ifac[N];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans=(ans%mod*a%mod)%mod;</span><br><span class="line">a=(a%mod*a%mod)%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (ans%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拉格朗日插值，n项，每个点的坐标为(x_i,y_i)，求第xi项的值，保证x是连续的一段 </span></span><br><span class="line"><span class="function">ll <span class="title">lagrange</span><span class="params">(ll n, ll *x, ll *y, ll xi)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    s1[<span class="number">0</span>] = (xi-x[<span class="number">0</span>])%mod, s2[n+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) s1[i] = <span class="number">1l</span>l*s1[i<span class="number">-1</span>]*(xi-x[i])%mod;</span><br><span class="line">    <span class="keyword">for</span> (ll i = n; i &gt;= <span class="number">0</span>; i--) s2[i] = <span class="number">1l</span>l*s2[i+<span class="number">1</span>]*(xi-x[i])%mod;</span><br><span class="line">    ifac[<span class="number">0</span>] = ifac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = <span class="number">-1l</span>l*mod/i*ifac[mod%i]%mod;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt;= n; i++) ifac[i] = <span class="number">1l</span>l*ifac[i]*ifac[i<span class="number">-1</span>]%mod;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        (ans += <span class="number">1l</span>l*y[i]*(i == <span class="number">0</span> ? <span class="number">1</span> : s1[i<span class="number">-1</span>])%mod*s2[i+<span class="number">1</span>]%mod</span><br><span class="line">            *ifac[i]%mod*(((n-i)&amp;<span class="number">1</span>) ? <span class="number">-1</span> : <span class="number">1</span>)*ifac[n-i]%mod) %= mod;</span><br><span class="line">    <span class="keyword">return</span> (ans+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll n,k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">p[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=k+<span class="number">2</span>;i++) p[i]=(p[i<span class="number">-1</span>]%mod+qpow(i,k))%mod;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=k+<span class="number">2</span>;i++) x[i]=i;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=k+<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;lagrange(k+<span class="number">2</span>,x,p,n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>其实拉格朗日插值在算法竞赛中主要用于数据分析，即对于给定的某些关系构造出若干已知点，然后利用这些已知点去计算通项公式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;拉格朗日插值的应用&quot;&gt;&lt;a href=&quot;#拉格朗日插值的应用&quot; class=&quot;headerlink&quot; title=&quot;拉格朗日插值的应用&quot;&gt;&lt;/a&gt;拉格朗日插值的应用&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>2019江西省程序设计竞赛</title>
    <link href="http://yoursite.com/2020/04/07/JXCPC/"/>
    <id>http://yoursite.com/2020/04/07/JXCPC/</id>
    <published>2020-04-07T14:14:14.905Z</published>
    <updated>2019-07-21T15:21:19.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019江西省程序设计竞赛"><a href="#2019江西省程序设计竞赛" class="headerlink" title="2019江西省程序设计竞赛"></a>2019江西省程序设计竞赛</h1><a id="more"></a><h2 id="A-Cotree"><a href="#A-Cotree" class="headerlink" title="A.Cotree"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6567" target="_blank" rel="noopener">A.Cotree</a></h2><h2 id="题意"><a href="#题意" class="headerlink" title="题意:"></a>题意:</h2><p>两棵树，你需要连接两个点使得$\sum_{i=1}^{i=n}{\sum_{j=i+1}^{j=n}}{dis(i,j)}$最小。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>对于每棵树进行换根dp，对每棵子树找到一个点使得所有点到这个点的距离和最小，连接这两个点，然后进行一次DFS统计每条边的贡献，累加即可。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; G[N];</span><br><span class="line"><span class="keyword">int</span> n,n1,n2;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[x]) <span class="keyword">return</span> ;</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:G[x])&#123;</span><br><span class="line">        dfs1(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ta,tb,now;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[N];<span class="keyword">long</span> <span class="keyword">long</span> siz[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> u,<span class="keyword">long</span> <span class="keyword">long</span> fa)</span></span>&#123;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(v,u);</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">        dp[u]+=dp[v];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[u]+=siz[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs3</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> u,<span class="keyword">long</span> <span class="keyword">long</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ans&gt;dp[u])&#123;</span><br><span class="line">        ans=dp[u];</span><br><span class="line">        now=u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res=dp[u]-dp[v]-siz[v];</span><br><span class="line">        dp[v]=(dp[v]+res+n1-siz[v]);</span><br><span class="line">        dfs3(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs4</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> u,<span class="keyword">long</span> <span class="keyword">long</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ans&gt;dp[u])&#123;</span><br><span class="line">        ans=dp[u];</span><br><span class="line">        now=u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res=dp[u]-dp[v]-siz[v];</span><br><span class="line">        dp[v]=(dp[v]+res+n2-siz[v]);</span><br><span class="line">        dfs4(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">final</span>=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span>+=siz[now]*(n-siz[now]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:G[now])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("1.in","r",stdin);</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-2</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        G[u].push_back(v);</span><br><span class="line">        G[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a,b;<span class="comment">//找到左子树的一个点和右子树的一个点</span></span><br><span class="line">    a=<span class="number">1</span>;dfs1(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            b=i;n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    n1=n-n2;</span><br><span class="line">    ans=<span class="number">99999999999999</span>;</span><br><span class="line">    now=a;</span><br><span class="line">    dfs2(a,<span class="number">0</span>);</span><br><span class="line">    dfs3(a,<span class="number">0</span>);</span><br><span class="line">    ta=now;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">memset</span>(siz,<span class="number">0</span>,<span class="keyword">sizeof</span>(siz));</span><br><span class="line">    ans=<span class="number">99999999999999</span>;</span><br><span class="line">    now=b;</span><br><span class="line">    dfs2(b,<span class="number">0</span>);</span><br><span class="line">    dfs4(b,<span class="number">0</span>);</span><br><span class="line">    tb=now;</span><br><span class="line">    G[ta].push_back(tb);</span><br><span class="line">    G[tb].push_back(ta);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">memset</span>(siz,<span class="number">0</span>,<span class="keyword">sizeof</span>(siz));</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">final</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Wave"><a href="#D-Wave" class="headerlink" title="D.Wave"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6570" target="_blank" rel="noopener">D.Wave</a></h2><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>给一个数组，找到最长的一个子序列使得这个子序列的所有奇数位的数字相同，所有偶数位的数字相同，奇数位和偶数位的数字不同。</p><h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><p>利用一个前缀和可以快速地查询$[l,r]$区间内$c$的数量，记录下每个数字出现的位置，暴力枚举子序列的那两个不同的数字，更新最大值。</p><h2 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos[<span class="number">200</span>];</span><br><span class="line"><span class="keyword">int</span> num[N][<span class="number">201</span>];</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">        pos[i].push_back(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        pos[a[i]].push_back(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">100</span>;j++) num[i][j]=num[i<span class="number">-1</span>][j];</span><br><span class="line">        num[i][a[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=j)&#123;</span><br><span class="line">                <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">2</span>;k&lt;(<span class="keyword">int</span>)pos[i].size();k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(num[pos[i][k]][j]-num[pos[i][k<span class="number">-1</span>]][j]&gt;<span class="number">0</span>) now++;</span><br><span class="line">                &#125;</span><br><span class="line">                now=now*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(num[n][j]-num[pos[i][(<span class="keyword">int</span>)pos[i].size()<span class="number">-1</span>]][j]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                     now++;</span><br><span class="line">                &#125;</span><br><span class="line">                ans=max(ans,now);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-String"><a href="#F-String" class="headerlink" title="F.String"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6572" target="_blank" rel="noopener">F.String</a></h2><h2 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h2><p>给定一个字符串，随机拿出四个字母，求这四个字母组成”avin”的概率。</p><h2 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h2><p>答案即为$\frac{num[‘a’]<em>num[‘v’]</em>num[‘i’]*num[‘n’]}{|s|^4}$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;<span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a,b,c,d;</span><br><span class="line">        a=b=c=d=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'a'</span>) a++;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'v'</span>) b++;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'i'</span>) c++;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'n'</span>) d++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a*b*c*d==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"0/1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> x=a*b*c*d;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> y=(n*n*n*n);</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> gg=__gcd(x,y);</span><br><span class="line">            x/=gg;</span><br><span class="line">            y/=gg;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">'/'</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Traffic"><a href="#G-Traffic" class="headerlink" title="G.Traffic"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6573" target="_blank" rel="noopener">G.Traffic</a></h2><h2 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h2><p>一个十字路口，东西和南北各有车辆经过，每个车到达十字路口的时间为$t_i$,但是如果东西走向的汽车和南北走向的汽车同时到达十字路口，那么南北走向的就得等待。问最少要等多长时间。</p><h2 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h2><p>暴力枚举等待时间，知道不会再有车发生时间冲撞。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[N],b[N];</span><br><span class="line"><span class="keyword">bool</span> ta[N],tb[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(ta,<span class="number">0</span>,<span class="keyword">sizeof</span>(ta));</span><br><span class="line">        <span class="built_in">memset</span>(ta,<span class="number">0</span>,<span class="keyword">sizeof</span>(tb));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;a[i],ta[a[i]]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">999999999</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1001</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">memset</span>(tb,<span class="number">0</span>,<span class="keyword">sizeof</span>(tb));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                tb[b[j]+i]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(ta[b[j]+i]==<span class="number">1</span>)&#123;</span><br><span class="line">                    flag=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                res=i;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Rng"><a href="#H-Rng" class="headerlink" title="H.Rng"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6574" target="_blank" rel="noopener">H.Rng</a></h2><h2 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h2><p>一个$[1,n]$的区间，执行下列操作：<br>1.任意在$[1,n]$中选择一个$r$<br>2.在$[1,r]$中选择一个$l$<br>计算两次线段相交的概率</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h2><p>手动计算2的情况为$\frac{3}{4}$,暴力打表发现接近$\frac{1}{2}$，猜测答案为$\frac{n+1}{2*n}$</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            ans=(ans%mod*a%mod)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        a=(a%mod*a%mod)%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;((n+<span class="number">1</span>)%mod*qp(<span class="number">2</span>*n,mod<span class="number">-2</span>)%mod)%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Budget"><a href="#I-Budget" class="headerlink" title="I.Budget"></a><a href="http://acm.hdu.edu.cn/contests/contest_show.php?cid=868" target="_blank" rel="noopener">I.Budget</a></h2><h2 id="题意：-4"><a href="#题意：-4" class="headerlink" title="题意："></a>题意：</h2><p>$n$个保留三位的小数，计算他们四舍五入变为2位后的差值</p><h2 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h2><p>以string读入，判断最后一位即可。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2000000</span>;</span><br><span class="line"><span class="built_in">string</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">            <span class="keyword">int</span> l=(<span class="keyword">int</span>)a[i].length();</span><br><span class="line">            <span class="keyword">if</span>(a[i][l<span class="number">-1</span>]&lt;=<span class="string">'4'</span>)&#123;</span><br><span class="line">                ans-=((a[i][l<span class="number">-1</span>]-<span class="string">'0'</span>)*<span class="number">1.0</span>)/(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ans+=((<span class="number">10</span>-(a[i][l<span class="number">-1</span>]-<span class="string">'0'</span>))*<span class="number">1.0</span>)/<span class="number">1000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="J-Worker"><a href="#J-Worker" class="headerlink" title="J.Worker"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6576" target="_blank" rel="noopener">J.Worker</a></h2><h2 id="题意：-5"><a href="#题意：-5" class="headerlink" title="题意："></a>题意：</h2><p>$n$个工作间，$m$个人，第$i$个工作间每个人每天的产量位$a_i$，计算一种分配方案使的每个工作间的产量相同，如果没有，输出”No”。</p><h2 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h2><p>$lcm$分配即可。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3000</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">lcm</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*b/__gcd(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> all=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;a[i],all=lcm(all,a[i]);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> zz=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            b[i]=all/(a[i]);</span><br><span class="line">            zz+=b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m%zz)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++) <span class="built_in">cout</span>&lt;&lt;m/(zz)*b[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(m/zz)*b[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-Class"><a href="#K-Class" class="headerlink" title="K.Class"></a><a href="http://acm.hdu.edu.cn/contests/contest_showproblem.php?cid=868&amp;pid=1011" target="_blank" rel="noopener">K.Class</a></h2><h2 id="题意：-6"><a href="#题意：-6" class="headerlink" title="题意："></a>题意：</h2><p> $x=a+b,y=a-b$<br> 计算$a*b$</p><h2 id="思路：-6"><a href="#思路：-6" class="headerlink" title="思路："></a>思路：</h2><p> 答案为$\frac{(x+y)*(x-y)}{4}$</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x,y;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(x+y)*(x-y)/<span class="number">4</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2019江西省程序设计竞赛&quot;&gt;&lt;a href=&quot;#2019江西省程序设计竞赛&quot; class=&quot;headerlink&quot; title=&quot;2019江西省程序设计竞赛&quot;&gt;&lt;/a&gt;2019江西省程序设计竞赛&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="竞赛" scheme="http://yoursite.com/tags/%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>利用二分图和DP解决的差值最小问题</title>
    <link href="http://yoursite.com/2020/04/07/jisuanke2C/"/>
    <id>http://yoursite.com/2020/04/07/jisuanke2C/</id>
    <published>2020-04-07T14:14:14.903Z</published>
    <updated>2019-05-28T04:58:10.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用二分图和DP解决的分配差值最小问题"><a href="#利用二分图和DP解决的分配差值最小问题" class="headerlink" title="利用二分图和DP解决的分配差值最小问题"></a>利用二分图和DP解决的分配差值最小问题</h1><a id="more"></a><p>这类题目的大致样子就是，对于一个可重集合，在满足一些不兼容的关系的情况下，将其分成两个可重集合，使得这两个集合的大小差值最小。</p><p>解决方法:</p><p>我们对这多组不兼容关系连边构成一个图，如果这个图是二分图的话，那么就表明可以分成两个部分，接下来对每个联通块的两个子集和$dp$,令$dp_{ij}$表示到第$i$个联通块的时候第一个集合大小是否可能为$j$，到最后遍历找差值最小即可。这样我们就可以在$O(n^2)$的时间内解决问题。</p><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="$Problem_1:$"></a>$Problem_1:$</h2><h3 id="2019-计蒜之道-初赛-第二场C"><a href="#2019-计蒜之道-初赛-第二场C" class="headerlink" title="2019 计蒜之道 初赛 第二场C"></a><a href="https://nanti.jisuanke.com/t/39266" target="_blank" rel="noopener">2019 计蒜之道 初赛 第二场C</a></h3><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>一个长度为$n$的数组$a$，把他拆分成两个严格递增的数组，使得这两个数组的长度差值最小。无解输出$-1$.</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>对于$i<j$并且$a_i>=a_j$那么说明$a_i$和$a_j$一定不能在同一个数组中，我们对于不能在同一组的连接一条无向边，构成一个无向图，如果这个图是二分图则说明有解，否则无解。</p><p>对于有解的情况，我们对于图中的连通块进行$DP$,由于这个图是二分图，因此每个连通块都可以划分成最多两个不在同一阵营的子集，假设第$i$个连通块的两个子集大小分别为$w_{i1}$和$w_{i2}，$由于确定好一个数组之后另一个也确定了，因此我们让$DP_{ij}$代表到第$i$个连通块时第一个数组的大小为$j$是否可行，最后我们遍历$DP_{num,k}$，其中$num$是连通块的个数，$k$代表第一个数组的个数，找到$|k-(n-k)|$最小的可行$k$即为答案。复杂度$O(n^2)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; G[N];</span><br><span class="line">ll color[N],a[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line">ll w[N][<span class="number">3</span>];ll cnt;</span><br><span class="line">ll num1,num2;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(ll u,ll c)</span></span>&#123;</span><br><span class="line">color[u]=c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(color[v]==c) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(color[v]==<span class="number">0</span>&amp;&amp;!dfs(v,-c)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(ll x,<span class="keyword">bool</span> ok)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ok) num1++;</span><br><span class="line"><span class="keyword">else</span> num2++;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:G[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[v]) dfs2(v,!ok);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll dp[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line">ll n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis)); </span><br><span class="line"><span class="built_in">memset</span>(color,<span class="number">0</span>,<span class="keyword">sizeof</span>(color));</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">memset</span>(w,<span class="number">0</span>,<span class="keyword">sizeof</span>(w));</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">G[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&gt;=a[i])&#123;</span><br><span class="line">G[j].push_back(i);</span><br><span class="line">G[i].push_back(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!color[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfs(i,<span class="number">1</span>))&#123;</span><br><span class="line">flag=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">num1=num2=<span class="number">0</span>;</span><br><span class="line">dfs2(i,<span class="number">1</span>);</span><br><span class="line">w[++cnt][<span class="number">1</span>]=num1;</span><br><span class="line">w[cnt][<span class="number">2</span>]=num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=w[i][<span class="number">1</span>])&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i<span class="number">-1</span>][j-w[i][<span class="number">1</span>]]) dp[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=w[i][<span class="number">2</span>])&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i<span class="number">-1</span>][j-w[i][<span class="number">2</span>]]) dp[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N<span class="number">-50</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[cnt][i]) ans=min((ll)ans,<span class="built_in">abs</span>((i)-(n-i)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Problem-2"><a href="#Problem-2" class="headerlink" title="$Problem_2:$"></a>$Problem_2:$</h2><h3 id="2019ICPC西安邀请赛D-Miku-and-Generals"><a href="#2019ICPC西安邀请赛D-Miku-and-Generals" class="headerlink" title="2019ICPC西安邀请赛D: Miku and Generals"></a><a href="https://nanti.jisuanke.com/t/39271" target="_blank" rel="noopener">2019ICPC西安邀请赛D: Miku and Generals</a></h3><p>我们把每个联通快当作物品，价格为两部分的差值，然后01背包即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll N = <span class="number">200000</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; G[N];</span><br><span class="line">ll dp[N];</span><br><span class="line">ll WW[N]; </span><br><span class="line">ll w[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line">ll num1,num2,cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll u,<span class="keyword">bool</span> check)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(check) num1+=w[u];</span><br><span class="line"><span class="keyword">else</span> num2+=w[u];</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[v]) dfs(v,!check);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> WWW[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line">num1=num2=cnt=<span class="number">0</span>;</span><br><span class="line">ll n,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w[i];</span><br><span class="line">w[i]/=<span class="number">100</span>;</span><br><span class="line">sum+=w[i];</span><br><span class="line">G[i].clear();</span><br><span class="line">&#125;</span><br><span class="line">ll u,v;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">G[u].push_back(v);</span><br><span class="line">G[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">num1=num2=<span class="number">0</span>;</span><br><span class="line">dfs(i,<span class="number">1</span>);</span><br><span class="line">WW[++cnt]=<span class="built_in">abs</span>(num1-num2);</span><br><span class="line">sum1+=<span class="built_in">abs</span>(num1-num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=sum1/<span class="number">2</span>;j&gt;=WW[i];j--)&#123;</span><br><span class="line">dp[j]=max(dp[j],dp[j-WW[i]]+WW[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=sum1<span class="number">-2</span>*dp[sum1/<span class="number">2</span>];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(sum+ans)*<span class="number">50</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//4 1</span></span><br><span class="line"><span class="comment">//100 200 300 400</span></span><br><span class="line"><span class="comment">//1 4</span></span><br><span class="line"><span class="comment">//0</span></span><br><span class="line"><span class="comment">//500</span></span><br><span class="line"><span class="comment">//sum1-2*</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;利用二分图和DP解决的分配差值最小问题&quot;&gt;&lt;a href=&quot;#利用二分图和DP解决的分配差值最小问题&quot; class=&quot;headerlink&quot; title=&quot;利用二分图和DP解决的分配差值最小问题&quot;&gt;&lt;/a&gt;利用二分图和DP解决的分配差值最小问题&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>计蒜之道初赛1B</title>
    <link href="http://yoursite.com/2020/04/07/jisuanke1B/"/>
    <id>http://yoursite.com/2020/04/07/jisuanke1B/</id>
    <published>2020-04-07T14:14:14.897Z</published>
    <updated>2019-05-25T16:48:31.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="商汤AI园区的n个路口（DP）"><a href="#商汤AI园区的n个路口（DP）" class="headerlink" title="商汤AI园区的n个路口（DP）"></a>商汤AI园区的n个路口（DP）</h1><a id="more"></a><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a><a href="https://nanti.jisuanke.com/t/39261" target="_blank" rel="noopener">题面</a></h2><p>题意：给你一个长度为$n$的链，让你为每个点分配一个点权使得相邻两个点之间的$gcd$不等于边权，求方案数。要求是点权的范围是$[1,m]$。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>令$dp_{ij}$表示第$i$个点选择权值为$j$的方案数，那么状态转移方程为</p><center>$dp_{i,j}=\sum_{k=1}^{m}dp_{i-1,k}[gcd(j,k)\neq w_{i}]$ </center><p>复杂度$O(nm^2)$</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> w[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">w[b]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) dp[<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=m;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(__gcd(j,k)!=w[i])&#123;</span><br><span class="line">dp[i][j]=(dp[i][j]%mod+dp[i<span class="number">-1</span>][k]%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) ans=(ans%mod+dp[n][i]%mod)%mod;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;商汤AI园区的n个路口（DP）&quot;&gt;&lt;a href=&quot;#商汤AI园区的n个路口（DP）&quot; class=&quot;headerlink&quot; title=&quot;商汤AI园区的n个路口（DP）&quot;&gt;&lt;/a&gt;商汤AI园区的n个路口（DP）&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>HDU 6714 最短路2（Dijkstra）</title>
    <link href="http://yoursite.com/2020/04/07/HDU6714/"/>
    <id>http://yoursite.com/2020/04/07/HDU6714/</id>
    <published>2020-04-07T14:14:14.894Z</published>
    <updated>2019-08-25T00:51:32.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HDU-6714-最短路2（Dijkstra）"><a href="#HDU-6714-最短路2（Dijkstra）" class="headerlink" title="HDU 6714 最短路2（Dijkstra）"></a>HDU 6714 最短路2（Dijkstra）</h2><a id="more"></a><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6714" target="_blank" rel="noopener">题面</a></h2><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>对于$floyed$算法，$D_{i,j}$表示最外层循环最小的能够求出来$dis_{i,j}$的循环次数，计算$\sum_{i=1}^{n}{\sum_{j=1}^{n}{D_{i,j}}}$</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>其实$D_{i,j}$即为$i$到$j$的最短路路径上最小的不包含$i,j$的最大下标。我们跑$n$次$Dijkstra$，每次更新路径上的最小的最大下标即可。复杂度$O(n^2log(n))$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">read</span><span class="params">(ll &amp;num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> in;<span class="keyword">bool</span> IsN=<span class="literal">false</span>;</span><br><span class="line">    in=getchar();</span><br><span class="line">    <span class="keyword">if</span>(in==EOF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(in!=<span class="string">'-'</span>&amp;&amp;(in&lt;<span class="string">'0'</span>||in&gt;<span class="string">'9'</span>)) in=getchar();</span><br><span class="line">    <span class="keyword">if</span>(in==<span class="string">'-'</span>)&#123; IsN=<span class="literal">true</span>;num=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> num=in-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">while</span>(in=getchar(),in&gt;=<span class="string">'0'</span>&amp;&amp;in&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">            num*=<span class="number">10</span>,num+=in-<span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(IsN) num=-num;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ll  N = <span class="number">3005</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;ll,ll&gt; &gt; G[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    ll id;</span><br><span class="line">    ll DIS;</span><br><span class="line">&#125;;</span><br><span class="line">ll dis[N],n,m,u,v,w,pre[N],mx[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node a,node b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.DIS&gt;b.DIS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dij</span><span class="params">(ll st)</span></span>&#123;</span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) dis[i]=<span class="number">999999999999999</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) pre[i]=<span class="number">999999999999999</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) mx[i]=<span class="number">0</span>;</span><br><span class="line">    dis[st]=<span class="number">0</span>;</span><br><span class="line">    q.push(&#123;st,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        node rt=q.top();q.pop();</span><br><span class="line">        ll u=rt.id;</span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> V:G[u])&#123;</span><br><span class="line">            ll v=V.first;</span><br><span class="line">            ll w=V.second;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+w)&#123;</span><br><span class="line">                dis[v]=dis[u]+w;</span><br><span class="line">                q.push(&#123;v,dis[v]&#125;);</span><br><span class="line">                mx[v]=max(mx[u],u);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dis[v]==dis[u]+w)&#123;</span><br><span class="line">            mx[v]=min(mx[v],max(mx[u],u));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(u==st) mx[v]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) res+=mx[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll T;</span><br><span class="line">    read(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        read(n);read(m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) G[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            read(u);read(v);read(w);</span><br><span class="line">            G[u].push_back(&#123;v,w&#125;);</span><br><span class="line">            G[v].push_back(&#123;u,w&#125;);</span><br><span class="line">        </span><br><span class="line">      &#125;  ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans+=dij(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans%<span class="number">998244353</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HDU-6714-最短路2（Dijkstra）&quot;&gt;&lt;a href=&quot;#HDU-6714-最短路2（Dijkstra）&quot; class=&quot;headerlink&quot; title=&quot;HDU 6714 最短路2（Dijkstra）&quot;&gt;&lt;/a&gt;HDU 6714 最短路2（Dijkstra）&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>HDU 6638 Snowy Smile(线段树)</title>
    <link href="http://yoursite.com/2020/04/07/HDU6638/"/>
    <id>http://yoursite.com/2020/04/07/HDU6638/</id>
    <published>2020-04-07T14:14:14.892Z</published>
    <updated>2019-08-10T02:53:48.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HDU-6638-Snowy-Smile-线段树求区间连续最大和"><a href="#HDU-6638-Snowy-Smile-线段树求区间连续最大和" class="headerlink" title="HDU 6638 Snowy Smile(线段树求区间连续最大和)"></a>HDU 6638 Snowy Smile(线段树求区间连续最大和)</h1><a id="more"></a><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6638" target="_blank" rel="noopener">题面</a></h2><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>平面坐标系有$n$个点，第$i$个点的坐标为$(x_i,y_i)$,每个点有个权值$w_i$，现在你需要寻找一个矩形把某些点圈起来使得他们的权值和最大。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先把各点的纵坐标离散化，然后把所有的点按照横坐标从小到大排序，枚举矩形的左边界，每加入一个新的点，就把它对应纵坐标$y$的权值和$w[y]$更新并更改右边界，当左右边界都确定以后，利用线段树求得纵坐标的最大连续子段和，不断更新答案。复杂度$O(n^2log(n))$，注意每次枚举左边界都需要重新建树。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> N = <span class="number">10000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x,y,w;</span><br><span class="line">&#125;s[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> yy[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> L[N&lt;&lt;<span class="number">1</span>],R[N&lt;&lt;<span class="number">1</span>],S[N&lt;&lt;<span class="number">1</span>],MX[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> rt)</span></span>&#123;</span><br><span class="line">    S[rt]=S[rt&lt;&lt;<span class="number">1</span>]+S[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    MX[rt]=max(L[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+R[rt&lt;&lt;<span class="number">1</span>],max(MX[rt&lt;&lt;<span class="number">1</span>],MX[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]));</span><br><span class="line">    L[rt]=max(L[rt&lt;&lt;<span class="number">1</span>],L[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+S[rt&lt;&lt;<span class="number">1</span>]);</span><br><span class="line">    R[rt]=max(R[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],R[rt&lt;&lt;<span class="number">1</span>]+S[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bt</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> rt,<span class="keyword">long</span> <span class="keyword">long</span> l,<span class="keyword">long</span> <span class="keyword">long</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        L[rt]=R[rt]=S[rt]=MX[rt]=<span class="number">0</span>;<span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    bt(rt&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    bt(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> pos,<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> l,<span class="keyword">long</span> <span class="keyword">long</span> r,<span class="keyword">long</span> <span class="keyword">long</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        MX[rt]=L[rt]=R[rt]=max(<span class="number">0L</span>L,x);</span><br><span class="line">        S[rt]=x;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid) update(pos,x,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> update(pos,x,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> T;<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(yy,<span class="number">0</span>,<span class="keyword">sizeof</span>(yy));</span><br><span class="line">        <span class="keyword">int</span>  n;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;s[i].x,&amp;s[i].y,&amp;s[i].w);</span><br><span class="line">            yy[i]=s[i].y;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(yy+<span class="number">1</span>,yy+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> m=unique(yy+<span class="number">1</span>,yy+n+<span class="number">1</span>)-yy<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            s[i].y=lower_bound(yy+<span class="number">1</span>,yy+m+<span class="number">1</span>,s[i].y)-yy;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(s+<span class="number">1</span>,s+n+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//枚举左边界</span></span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">1</span>||s[i].x!=s[i<span class="number">-1</span>].x)&#123;</span><br><span class="line">                 bt(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line">                 <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) w[j]=<span class="number">0</span>;</span><br><span class="line">                 <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)&#123;<span class="comment">//右边界</span></span><br><span class="line">                    w[s[j].y]+=s[j].w;</span><br><span class="line">                    update(s[j].y,w[s[j].y],<span class="number">1</span>,m,<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(s[j].x!=s[j+<span class="number">1</span>].x||j==n) ans=max(ans,MX[<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HDU-6638-Snowy-Smile-线段树求区间连续最大和&quot;&gt;&lt;a href=&quot;#HDU-6638-Snowy-Smile-线段树求区间连续最大和&quot; class=&quot;headerlink&quot; title=&quot;HDU 6638 Snowy Smile(线段树求区间连续最大和)&quot;&gt;&lt;/a&gt;HDU 6638 Snowy Smile(线段树求区间连续最大和)&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Nonsense Time</title>
    <link href="http://yoursite.com/2020/04/07/HDU6635/"/>
    <id>http://yoursite.com/2020/04/07/HDU6635/</id>
    <published>2020-04-07T14:14:14.890Z</published>
    <updated>2019-08-11T09:58:50.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HDU-6635-Nonsense-Time"><a href="#HDU-6635-Nonsense-Time" class="headerlink" title="HDU 6635 Nonsense Time"></a>HDU 6635 Nonsense Time</h1><a id="more"></a><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6635" target="_blank" rel="noopener">题面</a></h2><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>一个随机生成的长度为$n$的排列，刚开始这些数字全都被封印，接下来$n$次操作，每次把一个数解封，对于每次操作，查询当前数组$LIS$的长度。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们逆向思考，对于给定的数组每次删去一个数，相邻两次操作的答案不会超过$1$，对于第$i$次操作我们随便求一个$LIS$,如果第$i+1$次操作删除的数字在这个$LIS$内，我们就要重新求$LIS$,否则答案保持不变，由于随机生成的全排列$LIS$长度的期望为$\sqrt n$，因此最多计算$\sqrt n$次$LIS$,复杂度$O(n \cdot \sqrt n \cdot log(n) )$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">60000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0X3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> dp[N],fa[N],a[N],ans[N],b[N],order[N],n,pos[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N],ok[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span>&#123;<span class="comment">//求LIS</span></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) b[cnt++]=a[i];<span class="comment">//剩下的数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dp,INF,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">memset</span>(ok,<span class="number">0</span>,<span class="keyword">sizeof</span>(ok));</span><br><span class="line"><span class="keyword">int</span> lpos;</span><br><span class="line">pos[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">dp[lpos=(lower_bound(dp,dp+cnt,b[i])-dp)]=b[i];</span><br><span class="line">pos[lpos]=i;</span><br><span class="line">fa[i]=(lpos?pos[lpos<span class="number">-1</span>]:<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cnt=lower_bound(dp,dp+cnt,INF)-dp;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=pos[cnt<span class="number">-1</span>];~fa[i];i=fa[i])&#123;</span><br><span class="line"> ok[b[i]]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ok[b[i]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">jud</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">vis[id]=<span class="number">1</span>;<span class="comment">//删除这个数</span></span><br><span class="line"><span class="keyword">if</span>(ok[a[id]]==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//这个数不在LIS里面则说明LIS长度不变</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(ok,<span class="number">0</span>,<span class="keyword">sizeof</span>(ok));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;order[i]);</span><br><span class="line">ans[n]=solve();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">2</span>;i--)&#123;<span class="comment">//倒序</span></span><br><span class="line"><span class="keyword">if</span>(jud(order[i])) ans[i<span class="number">-1</span>]=ans[i];</span><br><span class="line"><span class="keyword">else</span> ans[i<span class="number">-1</span>]=solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i],(i==n?<span class="string">'\n'</span>:<span class="string">' '</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HDU-6635-Nonsense-Time&quot;&gt;&lt;a href=&quot;#HDU-6635-Nonsense-Time&quot; class=&quot;headerlink&quot; title=&quot;HDU 6635 Nonsense Time&quot;&gt;&lt;/a&gt;HDU 6635 Nonsense Time&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="结论" scheme="http://yoursite.com/tags/%E7%BB%93%E8%AE%BA/"/>
    
  </entry>
  
</feed>
